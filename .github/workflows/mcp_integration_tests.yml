name: MCP Integration Tests

# このワークフローは、MCPプロトコルを使用してClaude DesktopとMaxを連携させるための
# 統合テストを実行します

on:
  push:
    branches: [ main, feature/*, release/*, fix/* ]
    paths:
      - 'src/mcp_client/**'
      - 'src/tools/**'
      - 'src/max_operations/**'
      - '.github/workflows/mcp_integration_tests.yml'
      - 'tests/integration/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/mcp_client/**'
      - 'src/tools/**'
      - 'src/max_operations/**'
      - 'tests/integration/**'

jobs:
  basic-checks:
    name: Repository Structure Check
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
          fetch-depth: 0

      - name: Verify Project Structure
        run: |
          echo "🔒 プロジェクト構造確認中..."

          # 基本的なプロジェクト構造の確認
          if [ ! -d "$GITHUB_WORKSPACE/src/mcp_client" ]; then
            echo "❌ エラー: MCP Clientディレクトリが見つかりません"
            exit 1
          fi

          if [ ! -d "$GITHUB_WORKSPACE/src/tools" ]; then
            echo "❌ エラー: Toolsディレクトリが見つかりません"
            exit 1
          fi

          if [ ! -d "$GITHUB_WORKSPACE/tests" ]; then
            echo "❌ エラー: Testsディレクトリが見つかりません"
            exit 1
          fi

          echo "✅ プロジェクト構造確認完了"

  build-and-test:
    name: Build and Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: basic-checks
    strategy:
      fail-fast: false
      matrix:
        os: [macos-11, macos-latest]  # Intel MacとApple Silicon Macの両方をカバー

    steps:
      - name: Check out repository with submodules
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
          fetch-depth: 0

      - name: Set up CMake
        uses: jwlawson/actions-setup-cmake@v1.13
        with:
          cmake-version: '3.21.x'

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install nlohmann-json

          # libwebsocketsのビルド
          echo "🔨 libwebsocketsのビルドを開始..."
          chmod +x $GITHUB_WORKSPACE/scripts/build_libwebsockets.sh
          $GITHUB_WORKSPACE/scripts/build_libwebsockets.sh
          echo "✅ libwebsocketsのビルド完了"

          # 依存関係セットアップスクリプトの実行
          if [ -f "$GITHUB_WORKSPACE/scripts/setup_dependencies.sh" ]; then
            chmod +x $GITHUB_WORKSPACE/scripts/setup_dependencies.sh
            $GITHUB_WORKSPACE/scripts/setup_dependencies.sh
          fi

      - name: Configure CMake
        run: |
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTING=ON

      - name: Build project
        run: |
          cd build
          cmake --build . --config Debug -j $(nproc)

      - name: Run unit tests
        run: |
          cd build
          ctest -C Debug --output-on-failure -R "unit_"

      - name: Run integration tests
        run: |
          cd build
          ctest -C Debug --output-on-failure -R "integration_"

      - name: Collect test logs
        if: always()
        run: |
          mkdir -p test-logs
          if [ -d "build/Testing" ]; then
            cp -r build/Testing test-logs/
          fi

          # カスタムテストログの保存
          find build -name "*.log" -type f -exec cp {} test-logs/ \;

      - name: Upload test logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-logs-${{ matrix.os }}
          path: test-logs

  mock-claude-desktop-test:
    name: Mock Claude Desktop Test
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          cd tests/mocks/claude-desktop
          npm install

      - name: Start Claude Desktop mock server
        run: |
          cd tests/mocks/claude-desktop
          node server.js &
          echo $! > server.pid
          echo "⏳ モックサーバーの起動を確認中..."
          sleep 5

      - name: Run MCP client tests
        run: |
          cd tests/mcp_client
          chmod +x run_mock_tests.sh
          ./run_mock_tests.sh

      - name: Stop mock server
        if: always()
        run: |
          if [ -f "tests/mocks/claude-desktop/server.pid" ]; then
            kill $(cat tests/mocks/claude-desktop/server.pid)
            rm tests/mocks/claude-desktop/server.pid
          fi

      - name: Collect test results
        if: always()
        run: |
          mkdir -p mock-test-results
          find tests/mcp_client -name "*.log" -type f -exec cp {} mock-test-results/ \;

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: mock-test-results
          path: mock-test-results

  publish-results:
    name: Publish Test Results
    runs-on: ubuntu-latest
    needs: [build-and-test, mock-claude-desktop-test]
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: all-artifacts

      - name: Generate test summary
        run: |
          echo "# MCP統合テスト結果" > test-summary.md
          echo "テスト実行日時: $(date)" >> test-summary.md
          echo "" >> test-summary.md

          echo "## ビルド結果" >> test-summary.md
          if [ "${{ needs.build-and-test.result }}" = "success" ]; then
            echo "✅ **成功**" >> test-summary.md
          else
            echo "❌ **失敗**" >> test-summary.md
          fi
          echo "" >> test-summary.md

          echo "## モックテスト結果" >> test-summary.md
          if [ "${{ needs.mock-claude-desktop-test.result }}" = "success" ]; then
            echo "✅ **成功**" >> test-summary.md
          else
            echo "❌ **失敗**" >> test-summary.md
          fi
          echo "" >> test-summary.md

          echo "## テストログ" >> test-summary.md
          echo "テストログは成果物として保存されています。" >> test-summary.md

      - name: Upload test summary
        uses: actions/upload-artifact@v3
        with:
          name: test-summary
          path: test-summary.md
