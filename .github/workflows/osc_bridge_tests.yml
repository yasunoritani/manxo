name: OSC Bridge Tests

on:
  push:
    branches: [ main, feature/*, release/* ]
    paths:
      - 'src/min-devkit/osc_bridge/**'
      - '.github/workflows/osc_bridge_tests.yml'
      - 'run_tests.sh'
    # toolsディレクトリは明示的に除外する必要はない（.gitignoreで保護されていると仮定）
  pull_request:
    branches: [ main ]
    paths:
      - 'src/min-devkit/osc_bridge/**'
      - 'run_tests.sh'

jobs:
  test:
    name: OSC Bridge Tests on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-11, macos-latest]  # Intel MacとApple Silicon Macの両方をカバー
    
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      
      - name: Install dependencies
        run: |
          brew install cmake
          
          # oscpackのユニバーサルビルド
          cd $GITHUB_WORKSPACE/oscpack
          if [ -f "./build_universal.sh" ]; then
            chmod +x ./build_universal.sh
            ./build_universal.sh
          else
            echo "Warning: build_universal.sh not found, using default build"
            mkdir -p build && cd build
            cmake .. && make
          fi
          
          # ビルド成果物の確認
          echo "::group::oscpack build verification"
          find $GITHUB_WORKSPACE/oscpack -name "*.a" -o -name "*.lib" || echo "No libraries found"
          ls -la $GITHUB_WORKSPACE/oscpack/build/ || echo "Build directory not found"
          echo "::endgroup::"
      
      - name: Verify gitignore and protected files
        run: |
          # toolsディレクトリのチェック
          if [ -d "$GITHUB_WORKSPACE/tools" ]; then
            echo "⚠️ Warning: tools directory found - checking .gitignore settings..."
            if grep -q "^/tools" $GITHUB_WORKSPACE/.gitignore || grep -q "^tools/" $GITHUB_WORKSPACE/.gitignore; then
              echo "✅ tools directory is properly excluded in .gitignore"
            else
              echo "❌ ERROR: tools directory is not properly excluded in .gitignore"
              exit 1
            fi
          else
            echo "ℹ️ No tools directory found in workspace - skipping check"
          fi

          # 機密ファイルの.gitignoreチェック
          echo "Checking .gitignore for sensitive files..."
          SENSITIVE_FILES=(".env" ".env.local" ".env.*.local" ".windsurfrules")
          for file in "${SENSITIVE_FILES[@]}"; do
            if ! grep -q "$file" $GITHUB_WORKSPACE/.gitignore; then
              echo "⚠️ Warning: $file is not excluded in .gitignore"
            else
              echo "✅ $file is properly excluded in .gitignore"
            fi
          done
      
      - name: Build and Run Legacy Tests
        id: legacy_tests
        run: |
          echo "::group::Legacy Tests (Min-DevKit依存)"
          chmod +x $GITHUB_WORKSPACE/run_tests.sh
          $GITHUB_WORKSPACE/run_tests.sh --legacy
          echo "::endgroup::"
        continue-on-error: true
        
      - name: Build and Run Standalone Tests
        id: standalone_tests
        run: |
          echo "::group::Standalone Tests (Min-DevKit非依存)"
          
          # スクリプト実行前の診断情報
          echo "環境変数の表示:"
          echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE"
          
          # 明示的にCMakeから直接ビルドを試行
          cd $GITHUB_WORKSPACE/src/min-devkit/osc_bridge
          cmake -S . -B build -DBUILD_OSC_BRIDGE_STANDALONE_TESTS=ON -DCMAKE_VERBOSE_MAKEFILE=ON
          cmake --build build
          
          # テスト実行
          chmod +x $GITHUB_WORKSPACE/run_tests.sh
          $GITHUB_WORKSPACE/run_tests.sh --standalone
          
          echo "::endgroup::"
        continue-on-error: true
        
      - name: Check Test Results
        run: |
          echo "::group::テスト結果の確認"
          echo "従来のテスト: ${{ steps.legacy_tests.outcome == 'success' && '✅ 成功' || '❌ 失敗' }}"
          echo "スタンドアロンテスト: ${{ steps.standalone_tests.outcome == 'success' && '✅ 成功' || '❌ 失敗' }}"
          
          # 詳細な診断情報（エラー時のトラブルシュート用）
          if [[ "${{ steps.standalone_tests.outcome }}" != "success" ]]; then
            echo "::group::スタンドアロンテスト詳細診断"
            
            echo "oscpackライブラリの検索:"
            find $GITHUB_WORKSPACE -name "liboscpack.a" -o -name "oscpack.lib" || echo "No libraries found"
            
            echo "\nビルドディレクトリの内容:"
            ls -la $GITHUB_WORKSPACE/src/min-devkit/osc_bridge/build/ || echo "Build directory listing failed"
            
            echo "\nテスト実行ファイルの検索:"
            find $GITHUB_WORKSPACE/src/min-devkit/osc_bridge/build -name "test_osc_bridge_standalone" || echo "Test executable not found"
            
            echo "::endgroup::"
          fi
          
          # 少なくとも1つのテストセットが成功している場合は成功とする
          if [[ "${{ steps.legacy_tests.outcome }}" == "success" || "${{ steps.standalone_tests.outcome }}" == "success" ]]; then
            echo "少なくとも1つのテストセットが成功しました。"
          else
            echo "すべてのテストセットが失敗しました。"
            exit 1
          fi
          
          echo "::endgroup::"
          echo "::endgroup::"
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.os }}
          path: ${{ github.workspace }}/docs/test_results/
          retention-days: 14
          # 機密ファイルは除外
          exclude: |
            **/.env*
            **/.windsurfrules
            **/tools/**
            **/secure_config/**
            **/private/**
            **/credentials/**
      
      - name: Post test results comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // 最新のテスト結果ファイルを検索
            const testResultsDir = path.join(process.env.GITHUB_WORKSPACE, 'docs/test_results');
            let files = [];
            try {
              files = fs.readdirSync(testResultsDir)
                .filter(file => file.startsWith('test_result_'))
                .sort()
                .reverse();
            } catch (error) {
              console.log(`Error reading test results directory: ${error.message}`);
              return;
            }
              
            if (files.length === 0) {
              console.log('No test result files found');
              return;
            }
            
            const latestFile = path.join(testResultsDir, files[0]);
            const testResults = fs.readFileSync(latestFile, 'utf8');
            
            // テスト結果の概要を抽出
            const lines = testResults.split('\n');
            const summary = lines
              .filter(line => 
                line.includes('test cases') || 
                line.includes('assertions') || 
                line.includes('テスト結果:') ||
                line.includes('OSC Bridge') ||
                line.includes('成功') || 
                line.includes('失敗')
              )
              .join('\n');
            
            // PR番号の取得
            const prNumber = context.issue.number;
            
            // コメントの投稿
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: `## OSC Bridge Test Results on ${{ matrix.os }}\n\n### テスト結果概要\n- 従来のテスト (Min-DevKit依存): ${{ steps.legacy_tests.outcome == 'success' ? '✅ 成功' : '❌ 失敗' }}\n- スタンドアロンテスト (Min-DevKit非依存): ${{ steps.standalone_tests.outcome == 'success' ? '✅ 成功' : '❌ 失敗' }}\n\n\`\`\`\n${summary}\n\`\`\`\n\n詳細は添付されたテスト結果を確認してください。`
            });
