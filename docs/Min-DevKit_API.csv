function_name,signature,return_type,description,parameters,example_usage,min_version,max_version,notes
defer_low,void* defer_low(void* obj, method fn, void* data, long ac, t_atom* av),void*,低優先度でメソッド呼び出しを遅延。バックグラウンド処理,"obj:オブジェクト, fn:メソッド, data:データ, ac:引数数, av:引数配列",defer_low(x, (method)background_method, NULL, 0, NULL),4.0,現行,バックグラウンド処理用の遅延実行
clock_delay,void clock_delay(void* c, double delay),void,クロックを指定時間後に起動。タイミング制御,"c:クロックオブジェクト, delay:遅延時間(ms)",clock_delay(x->clock, 1000.0),4.0,現行,ミリ秒単位の遅延タイマー
clock_unset,void clock_unset(void* c),void,クロックの起動をキャンセル。タイマーキャンセル,"c:クロックオブジェクト",clock_unset(x->clock),4.0,現行,予約済みクロックのキャンセル
clock_new,void* clock_new(void* obj, method fn),void*,新しいクロックオブジェクトを作成。タイマー生成,"obj:オブジェクト, fn:コールバック関数",x->clock = clock_new(x, (method)tick),4.0,現行,時間ベースのイベント生成機構
clock_free,void clock_free(void* c),void,クロックオブジェクトを解放。リソース解放,"c:クロックオブジェクト",clock_free(x->clock),4.0,現行,クロックリソースの解放
qelem_new,void* qelem_new(void* obj, method fn),void*,キューエレメントを作成。イベントキュー,"obj:オブジェクト, fn:コールバック関数",x->qelem = qelem_new(x, (method)my_qfn),4.0,現行,イベントキューイング機構
qelem_set,void qelem_set(void* q),void,キューエレメントをスケジュール。キュー登録,"q:キューエレメント",qelem_set(x->qelem),4.0,現行,キューへのタスク登録
qelem_unset,void qelem_unset(void* q),void,キューエレメントをキャンセル。登録解除,"q:キューエレメント",qelem_unset(x->qelem),4.0,現行,キュータスクのキャンセル
qelem_free,void qelem_free(void* q),void,キューエレメントを解放。リソース解放,"q:キューエレメント",qelem_free(x->qelem),4.0,現行,キューリソースの解放
jit_object_method,void* jit_object_method(void* x, t_symbol* s, ...),void*,Jitterオブジェクトのメソッドを呼び出す。Jitter操作,"x:Jitterオブジェクト, s:メソッド名, ...:引数",jit_object_method(matrix, _jit_sym_setinfo, &info),5.0,現行,Jitterオブジェクト操作用の汎用メソッド
jit_object_new,void* jit_object_new(t_symbol* classname),void*,新しいJitterオブジェクトを作成。Jitterオブジェクト生成,"classname:クラス名",matrix = jit_object_new(_jit_sym_jit_matrix, type, dim_count, dim),5.0,現行,Jitterオブジェクトのインスタンス化
jit_object_free,void jit_object_free(void* x),void,Jitterオブジェクトを解放。リソース解放,"x:Jitterオブジェクト",jit_object_free(matrix),5.0,現行,Jitterリソースの解放
jit_matrix_info_default,void jit_matrix_info_default(t_jit_matrix_info* info),void,マトリックス情報をデフォルト値で初期化。情報構造体設定,"info:マトリックス情報構造体",jit_matrix_info_default(&info),5.0,現行,マトリックス情報の初期化
critical_enter,int critical_enter(t_critical* c),int,クリティカルセクションに入る。排他制御開始,"c:クリティカルセクションオブジェクト",critical_enter(x->critical),4.0,現行,スレッド間の排他制御
critical_exit,void critical_exit(t_critical* c),void,クリティカルセクションから出る。排他制御終了,"c:クリティカルセクションオブジェクト",critical_exit(x->critical),4.0,現行,排他制御の終了
critical_new,t_critical* critical_new(),t_critical*,新しいクリティカルセクションを作成。同期オブジェクト生成,なし,x->critical = critical_new(),4.0,現行,排他制御オブジェクトの生成
critical_free,void critical_free(t_critical* c),void,クリティカルセクションを解放。リソース解放,"c:クリティカルセクションオブジェクト",critical_free(x->critical),4.0,現行,排他制御リソースの解放
sysmem_newptr,void* sysmem_newptr(long size),void*,新しいメモリブロックを確保。動的メモリ割り当て,"size:バイト数",x->buffer = (float*)sysmem_newptr(size * sizeof(float)),4.0,現行,メモリ動的確保
sysmem_freeptr,void sysmem_freeptr(void* ptr),void,メモリブロックを解放。メモリ解放,"ptr:メモリポインタ",sysmem_freeptr(x->buffer),4.0,現行,動的確保したメモリの解放
sysmem_resizeptr,void* sysmem_resizeptr(void* ptr, long newsize),void*,メモリブロックのサイズを変更。メモリ再割り当て,"ptr:メモリポインタ, newsize:新しいサイズ",x->buffer = (float*)sysmem_resizeptr(x->buffer, newsize * sizeof(float)),4.0,現行,動的メモリのリサイズ
proxy_getinlet,short proxy_getinlet(t_object* x),short,現在のインレット番号を取得。入力ポート識別,"x:オブジェクト",inlet_num = proxy_getinlet((t_object*)x),4.0,現行,複数インレットでの入力元識別
proxy_new,void* proxy_new(t_object* x, long id, long* inlet),void*,プロキシ新規作成。追加インレット管理,"x:オブジェクト, id:ID, inlet:インレット値保存先",x->proxy = proxy_new((t_object*)x, 1, &x->inlet),4.0,現行,複数インレットの管理
proxy_delete,void proxy_delete(void* p),void,プロキシ削除。リソース解放,"p:プロキシオブジェクト",proxy_delete(x->proxy),4.0,現行,プロキシリソースの解放
class_addmethod,void class_addmethod(t_class* c, method m, const char* name, ...),void,クラスにメソッドを追加。メソッド登録,"c:クラス, m:メソッド関数, name:メソッド名, ...:引数型",class_addmethod(c, (method)myobj_bang, ""bang"", 0),4.0,現行,メソッドのクラスへの登録
class_addattr,t_max_err class_addattr(t_class* c, t_object* attr),t_max_err,クラスに属性を追加。属性登録,"c:クラス, attr:属性オブジェクト",class_addattr(c, attr),4.0,現行,属性のクラスへの登録
class_register,t_max_err class_register(t_symbol* name, t_class** c),t_max_err,クラスを登録。クラスの有効化,"name:名前空間, c:クラスポインタの参照",class_register(CLASS_BOX, &c),4.0,現行,クラスのシステム登録
gensym,t_symbol* gensym(const char* s),t_symbol*,シンボルを取得または作成。シンボルテーブル管理,"s:シンボル名",t_symbol* ps_buffer = gensym(""buffer""),4.0,現行,文字列からシンボルオブジェクト生成
atom_setobj,void atom_setobj(t_atom* a, void* o),void,アトム値をオブジェクトポインタに設定。アトムデータ初期化,"a:アトム, o:オブジェクトポインタ",atom_setobj(&a[0], matrix),4.0,現行,アトムにオブジェクト参照を設定
atom_getobj,void* atom_getobj(const t_atom* a),void*,アトム値からオブジェクトポインタを取得。アトムデータ解析,"a:アトム",void* obj = atom_getobj(argv),4.0,現行,アトムからオブジェクト参照を取得
dsp_add64,void dsp_add64(t_object* dspchain, t_object* obj, t_perfroutine64 perf64, long flags, void* userparam),void,DSP処理チェーンにオブジェクトを追加。オーディオ処理登録,"dspchain:DSPチェーン, obj:オブジェクト, perf64:処理関数, flags:フラグ, userparam:ユーザーパラメータ",dsp_add64(dsp64, obj, (t_perfroutine64)myobj_perform64, 0, NULL),6.0,現行,64ビットDSP処理チェーンへの登録
jbox_new,t_object* jbox_new(t_jbox_initclass* c, long flags, ...),t_object*,新しいUIボックスを作成。視覚的オブジェクト,"c:初期化構造体, flags:フラグ, ...:引数",obj = jbox_new(&jbox_init, flags),5.0,現行,UIオブジェクトの作成
jbox_ready,void jbox_ready(t_jbox* b),void,ボックスの準備完了を通知。UI初期化完了,"b:ボックスオブジェクト",jbox_ready((t_jbox*)x),5.0,現行,UIオブジェクトの初期化完了通知
jbox_redraw,void jbox_redraw(t_jbox* b),void,ボックスの再描画を要求。UI更新,"b:ボックスオブジェクト",jbox_redraw((t_jbox*)x),5.0,現行,UIの再描画要求
jgraphics_rectangle,void jgraphics_rectangle(t_jgraphics* g, double x, double y, double width, double height),void,矩形を描画。図形描画,"g:グラフィックスコンテキスト, x:X座標, y:Y座標, width:幅, height:高さ",jgraphics_rectangle(g, 0, 0, rect.width, rect.height),5.0,現行,矩形の描画
jgraphics_rectangle_fill,void jgraphics_rectangle_fill(t_jgraphics* g, double x, double y, double width, double height, double oval),void,塗りつぶし矩形を描画。図形描画,"g:グラフィックスコンテキスト, x:X座標, y:Y座標, width:幅, height:高さ, oval:角の丸み",jgraphics_rectangle_fill(g, 0, 0, rect.width, rect.height, 0),5.0,現行,塗りつぶし矩形の描画
jgraphics_line_draw,void jgraphics_line_draw(t_jgraphics* g, double x1, double y1, double x2, double y2),void,線を描画。図形描画,"g:グラフィックスコンテキスト, x1:始点X, y1:始点Y, x2:終点X, y2:終点Y",jgraphics_line_draw(g, 0, 0, rect.width, rect.height),5.0,現行,直線の描画
jgraphics_set_source_rgb,void jgraphics_set_source_rgb(t_jgraphics* g, double red, double green, double blue),void,描画色をRGBで設定。色指定,"g:グラフィックスコンテキスト, red:赤(0-1), green:緑(0-1), blue:青(0-1)",jgraphics_set_source_rgb(g, 1.0, 0.0, 0.0),5.0,現行,RGB色の設定
jgraphics_set_source_rgba,void jgraphics_set_source_rgba(t_jgraphics* g, double red, double green, double blue, double alpha),void,描画色をRGBAで設定。透明度付き色指定,"g:グラフィックスコンテキスト, red:赤(0-1), green:緑(0-1), blue:青(0-1), alpha:透明度(0-1)",jgraphics_set_source_rgba(g, 1.0, 0.0, 0.0, 0.5),5.0,現行,透明度付きRGBA色の設定
jgraphics_fill,void jgraphics_fill(t_jgraphics* g),void,パスを塗りつぶす。図形描画,"g:グラフィックスコンテキスト",jgraphics_fill(g),5.0,現行,パスの塗りつぶし
jgraphics_stroke,void jgraphics_stroke(t_jgraphics* g),void,パスの輪郭を描画。図形描画,"g:グラフィックスコンテキスト",jgraphics_stroke(g),5.0,現行,パスの輪郭描画
jgraphics_select_font_face,void jgraphics_select_font_face(t_jgraphics* g, const char* family, t_jgraphics_font_slant slant, t_jgraphics_font_weight weight),void,フォントを選択。テキスト描画設定,"g:グラフィックスコンテキスト, family:フォント名, slant:斜体, weight:太さ",jgraphics_select_font_face(g, ""Arial"", JGRAPHICS_FONT_SLANT_NORMAL, JGRAPHICS_FONT_WEIGHT_NORMAL),5.0,現行,フォントの選択
jgraphics_set_font_size,void jgraphics_set_font_size(t_jgraphics* g, double size),void,フォントサイズを設定。テキスト描画設定,"g:グラフィックスコンテキスト, size:サイズ",jgraphics_set_font_size(g, 12.0),5.0,現行,フォントサイズの設定
jgraphics_show_text,void jgraphics_show_text(t_jgraphics* g, const char* utf8),void,テキストを描画。テキスト表示,"g:グラフィックスコンテキスト, utf8:テキスト",jgraphics_show_text(g, ""Hello, world!""),5.0,現行,テキストの描画
sys_getsr,float sys_getsr(),float,現在のサンプリングレートを取得。システム情報,なし,float sr = sys_getsr(),4.0,現行,システムのサンプルレート取得
sys_getblksize,int sys_getblksize(),int,現在のブロックサイズを取得。システム情報,なし,int vs = sys_getblksize(),4.0,現行,システムのブロックサイズ取得
sys_getmaxblksize,int sys_getmaxblksize(),int,最大ブロックサイズを取得。システム情報,なし,int max_vs = sys_getmaxblksize(),5.0,現行,システムの最大ブロックサイズ取得
MIN_DSP_SETUP,MIN_DSP_SETUP {code},void,Min API: DSPセットアップ定義。オーディオ処理初期化,"code:セットアップコード",MIN_DSP_SETUP { /* 初期化処理 */ },7.0,現行,DSP初期化用マクロ
range::operator(min/max),T operator()(T value),T,Min API: 範囲制限演算子。値のクリッピング,"value:入力値",float limited_value = my_range(input_value),7.0,現行,Min-APIでの値範囲制限
object<T>::begin(),void begin(),void,Min API: オブジェクト処理開始。初期化ポイント,なし,template<> void begin() { /* 初期化処理 */ },7.0,現行,オブジェクト初期化ライフサイクルメソッド
object<T>::begin_dsp(),void begin_dsp(),void,Min API: DSP処理開始。DSP初期化ポイント,なし,template<> void begin_dsp() { /* DSP初期化処理 */ },7.0,現行,DSP初期化ライフサイクルメソッド
object<T>::bang(),void bang(),void,Min API: バングメッセージ処理。デフォルトバング処理,なし,template<> void bang() { /* バング処理 */ },7.0,現行,デフォルトバングメソッド
inlet<>::send(),send(args...),void,Min API: インレットへの送信。インレットへのデータ送信,"args:送信データ",input.send(value),7.0,現行,インレットへのデータ送信
outlet<>::send(),send(args...),void,Min API: アウトレットへの送信。アウトレットへのデータ送信,"args:送信データ",output.send(value),7.0,現行,アウトレットへのデータ送信
operator->(),T* operator->(),T*,Min API: 属性アクセス演算子。属性への直接アクセス,なし,auto value = attribute->;,7.0,現行,属性へのポインタアクセス
buffer_reference::lock(),buffer_lock<true> lock(),buffer_lock<true>,Min API: バッファロック。安全なバッファアクセス,なし,auto b = buffer.lock(),7.0,現行,バッファデータの安全なロック
buffer_lock<>::samples,float* samples,float*,Min API: バッファサンプルアクセス。サンプルデータへのポインタ,なし,auto samples = buffer_lock.samples,7.0,現行,ロックしたバッファのサンプルデータ
buffer_lock<>::length,size_t length,size_t,Min API: バッファ長さ。サンプル数,なし,auto length = buffer_lock.length,7.0,現行,バッファのサンプル数
buffer_lock<>::channel_count,size_t channel_count,size_t,Min API: バッファチャンネル数。チャンネル数,なし,auto channels = buffer_lock.channel_count,7.0,現行,バッファのチャンネル数
MIN_CLAMP,T MIN_CLAMP(T value, T lo, T hi),T,Min API: 値のクランプ。範囲制限,"value:入力値, lo:最小値, hi:最大値",float clamped = MIN_CLAMP(value, 0.0, 1.0),7.0,現行,値の範囲制限マクロ
MIN_WRAP,T MIN_WRAP(T value, T lo, T hi),T,Min API: 値のラップ。循環範囲制限,"value:入力値, lo:最小値, hi:最大値",float wrapped = MIN_WRAP(value, 0.0, 1.0),7.0,現行,値の循環範囲制限マクロ
MIN_FOLD,T MIN_FOLD(T value, T lo, T hi),T,Min API: 値の折り返し。鏡面範囲制限,"value:入力値, lo:最小値, hi:最大値",float folded = MIN_FOLD(value, 0.0, 1.0),7.0,現行,値の折り返し範囲制限マクロ
MIN_FILTER_SIGNAL,sample operator()(sample x),sample,Min API: 信号フィルタリング。サンプル処理関数,"x:入力サンプル",sample result = filter(input),7.0,現行,信号フィルタリング関数
dictobj::for_each,void for_each(const dict& d, function f),void,Min API: 辞書反復処理。全ての辞書要素に関数適用,"d:辞書, f:適用関数",dictobj::for_each(my_dict, [](const symbol& key, atom& value) { /* 処理 */ }),7.0,現行,辞書全要素への関数適用
path::exists,bool exists(),bool,Min API: パス存在確認。ファイルパスの存在検証,なし,if (p.exists()) { /* 処理 */ },7.0,現行,パスの存在確認
path::is_folder,bool is_folder(),bool,Min API: フォルダ判定。パスがフォルダかどうか,なし,if (p.is_folder()) { /* 処理 */ },7.0,現行,フォルダかどうかの判定
path::is_file,bool is_file(),bool,Min API: ファイル判定。パスがファイルかどうか,なし,if (p.is_file()) { /* 処理 */ },7.0,現行,ファイルかどうかの判定
path::filetype,symbol filetype(),symbol,Min API: ファイルタイプ取得。拡張子を取得,なし,auto type = p.filetype(),7.0,現行,ファイル拡張子の取得
queue::push,void push(function f),void,Min API: キューにタスク追加。非同期処理登録,"f:実行関数",q.push([&] { /* 処理 */ }),7.0,現行,非同期タスクの登録
timer::delay,void delay(double milliseconds),void,Min API: タイマー遅延設定。時間経過後の処理,"milliseconds:ミリ秒単位の遅延",metro.delay(1000.0),7.0,現行,タイマーの遅延設定
timer::stop,void stop(),void,Min API: タイマー停止。タイマーキャンセル,なし,metro.stop(),7.0,現行,タイマーの停止
preferences::set,void set(const symbol& key, const atoms& value),void,Min API: 環境設定値設定。設定の保存,"key:キー, value:値",preferences::set(""my-preference"", {1.0, ""text""}),7.0,現行,環境設定への値保存
preferences::get,atoms get(const symbol& key),atoms,Min API: 環境設定値取得。設定の読み込み,"key:キー",auto prefs = preferences::get(""my-preference""),7.0,現行,環境設定からの値取得
dict::append,void append(const symbol& key, const atom& value),void,Min API: 辞書に値追加。キーと値のペア追加,"key:キー, value:値",my_dict.append(""key"", 1.0),7.0,現行,辞書への値追加
dict::contains,bool contains(const symbol& key),bool,Min API: 辞書キー存在確認。キーの存在検証,"key:キー",if (my_dict.contains(""key"")) { /* 処理 */ },7.0,現行,辞書のキー存在確認
MIN_LINEAR_INTERP,sample MIN_LINEAR_INTERP(sample frac, sample a, sample b),sample,Min API: 線形補間。2点間の補間,"frac:比率, a:開始値, b:終了値",sample result = MIN_LINEAR_INTERP(0.5, 0.0, 1.0),7.0,現行,線形補間マクロ
MIN_CUBIC_INTERP,sample MIN_CUBIC_INTERP(sample frac, sample a, sample b, sample c, sample d),sample,Min API: 3次補間。4点間の滑らかな補間,"frac:比率, a/b/c/d:参照点",sample result = MIN_CUBIC_INTERP(0.5, a, b, c, d),7.0,現行,3次補間マクロ
MIN_SPLINE_INTERP,sample MIN_SPLINE_INTERP(sample frac, sample a, sample b, sample c, sample d),sample,Min API: スプライン補間。4点間の滑らかな補間,"frac:比率, a/b/c/d:参照点",sample result = MIN_SPLINE_INTERP(0.5, a, b, c, d),7.0,現行,スプライン補間マクロ
MIN_HERMITE_INTERP,sample MIN_HERMITE_INTERP(sample frac, sample a, sample b, sample c, sample d),sample,Min API: エルミート補間。4点間の補間,"frac:比率, a/b/c/d:参照点",sample result = MIN_HERMITE_INTERP(0.5, a, b, c, d),7.0,現行,エルミート補間マクロ
MIN_COSINE_INTERP,sample MIN_COSINE_INTERP(sample frac, sample a, sample b),sample,Min API: コサイン補間。2点間の補間,"frac:比率, a:開始値, b:終了値",sample result = MIN_COSINE_INTERP(0.5, 0.0, 1.0),7.0,現行,コサイン補間マクロ
MIN_STRIDE_LOOP,void MIN_STRIDE_LOOP(inlets, outlets, vector_size, code),void,Min API: ストライドループ。効率的な配列処理,"inlets:入力配列, outlets:出力配列, vector_size:処理サイズ, code:処理内容",MIN_STRIDE_LOOP(in, out, vector_size, { out[i] = in[i] * gain; }),7.0,現行,効率的な信号処理ループマクロ
MIN_ALLOW_OVERFLOW,int MIN_ALLOW_OVERFLOW,int,Min API: オーバーフロー許可。境界チェック無効化,なし,#define MIN_ALLOW_OVERFLOW 1,7.0,現行,境界チェックスキップ用フラグ
MIN_ENABLE_VECTOR_OPERATORS,int MIN_ENABLE_VECTOR_OPERATORS,int,Min API: ベクトル演算子有効化。SIMD最適化,なし,#define MIN_ENABLE_VECTOR_OPERATORS 1,7.0,現行,ベクトル演算最適化フラグ
time_value::operator double(),operator double(),double,Min API: 時間値の数値変換。時間値から倍精度浮動小数点への変換,なし,double ms = time_value;,7.0,現行,時間値の数値変換演算子
MIN_UNITS,MIN_UNITS { units... },void,Min API: 単位定義。値の単位設定,"units:単位名リスト",MIN_UNITS { ""Hz"", ""ms"", ""%" };,7.0,現行,単位定義マクロ
MIN_ALLOW_WIRE_DEFAULTS,int MIN_ALLOW_WIRE_DEFAULTS,int,Min API: ワイヤーデフォルト許可。接続値の既定値,なし,#define MIN_ALLOW_WIRE_DEFAULTS 1,7.0,現行,ワイヤーデフォルト許可フラグ
MIN_PROCESS,void process(audio_bundle input, audio_bundle output),void,Min API: オーディオ処理。サンプルブロック処理,"input:入力バンドル, output:出力バンドル",void process(audio_bundle input, audio_bundle output) { /* 処理 */ },7.0,現行,オーディオブロック処理メソッド
MIN_PROCESS_WIRE,void operator()(audio_bundle input, audio_bundle output),void,Min API: ワイヤー処理。信号接続処理,"input:入力バンドル, output:出力バンドル",void operator()(audio_bundle input, audio_bundle output) { /* 処理 */ },7.0,現行,信号接続処理演算子
timer::timer,timer(object_base* owner, function f),timer,Min API: タイマfunction_name,signature,return_type,description,parameters,example_usage,min_version,max_version,notes
inlet_new,t_atom_long inlet_new(t_object* x, char* type),t_atom_long,新しいインレットを作成。オブジェクトに入力ポートを追加する,"x:オブジェクトポインタ, type:シグナルタイプ(""signal"",""float"" など)",inlet_new(this, ""signal""),1.0,現行,シグナルパスで必須。戻り値は失敗時0
outlet_new,void* outlet_new(t_object* x, char* type),void*,新しいアウトレットを作成。オブジェクトに出力ポートを追加する,"x:オブジェクトポインタ, type:出力タイプ(""bang"",""list"" など)",outlet_new(this, ""bang""),1.0,現行,メッセージアウトレット。失敗時はNULLを返す
class_new,t_class* class_new(const char* name, method new_method, method free_method, long size, method args, char flags),t_class*,新しいMaxクラスを定義。オブジェクト構造の基盤を作成,"name:クラス名, new_method:コンストラクタ, free_method:デストラクタ, size:構造体サイズ, args:引数処理メソッド, flags:フラグ",class_new(""myobject"", myobj_new, myobj_free, sizeof(t_myobj), 0, 0),1.0,現行,オブジェクト定義の基本。フラグはクラスのプロパティを指定
attribute_new,t_max_err class_addattr(t_class* c, t_object* attr),t_max_err,クラスに属性を追加。パラメータアクセスを提供,"c:クラスポインタ, attr:属性オブジェクト",class_addattr(c, attr_offset_new(""value"", USESYM(float64), 0, (method)0, (method)0, calcoffset(t_myobj, f_value))),1.0,現行,パラメータの登録。エラーコードを返す
object_alloc,void* object_alloc(t_class* c),void*,オブジェクトインスタンスのメモリ確保。クラス定義に基づいてインスタンス作成,"c:クラスポインタ",this = (t_myobj*)object_alloc(myobj_class),1.0,現行,新しいオブジェクトを生成。失敗時はNULLを返す
object_free,void object_free(void* x),void,オブジェクトインスタンスのメモリ解放。使用終了したオブジェクトの破棄,"x:オブジェクトポインタ",object_free(myobj),1.0,現行,オブジェクト削除時に自動的に呼び出されることが多い
attr_offset_new,t_object* attr_offset_new(const char* name, const t_symbol* type, long flags, method getter, method setter, long offset),t_object*,オフセットベースの属性を作成。構造体メンバへのアクセス方法を定義,"name:属性名, type:データ型, flags:フラグ, getter:ゲッターメソッド, setter:セッターメソッド, offset:構造体内のオフセット",attr_offset_new(""value"", USESYM(float64), 0, (method)0, (method)0, calcoffset(t_myobj, f_value)),1.0,現行,属性アクセサの作成。カスタムゲッター/セッターが不要な場合に便利
calcoffset,long calcoffset(t_class_name, t_member_name),long,構造体メンバのバイトオフセットを計算。属性アクセスに使用,"t_class_name:構造体型, t_member_name:メンバ名",calcoffset(t_myobj, f_value),1.0,現行,メンバ変数の位置を特定。マクロとして実装
object_method,t_max_err object_method(void* x, t_symbol* s, ...),t_max_err,オブジェクトのメソッドを呼び出す。動的メソッド呼び出し,"x:オブジェクトポインタ, s:メソッド名, ...:引数",object_method(buffer, gensym(""getnumframes""), &numframes),1.0,現行,一般的なメソッド呼び出し機構。戻り値は呼び出し結果
outlet_bang,void outlet_bang(void* o),void,バングメッセージを出力。トリガー信号の送信,"o:アウトレットポインタ",outlet_bang(m_outlet),1.0,現行,シンプルなトリガー出力
outlet_int,void outlet_int(void* o, t_atom_long n),void,整数値を出力。整数データの送信,"o:アウトレットポインタ, n:整数値",outlet_int(m_outlet, 42),1.0,現行,整数値の出力
outlet_float,void outlet_float(void* o, double f),void,浮動小数点値を出力。浮動小数点データの送信,"o:アウトレットポインタ, f:浮動小数点値",outlet_float(m_outlet, 3.14159),1.0,現行,浮動小数点値の出力
outlet_list,void outlet_list(void* o, t_symbol* s, short ac, t_atom* av),void,リストを出力。複数値の送信,"o:アウトレットポインタ, s:リスト識別子, ac:要素数, av:要素配列",outlet_list(m_outlet, 0L, 3, myatoms),1.0,現行,複数の値をまとめて出力
outlet_anything,void outlet_anything(void* o, t_symbol* s, short ac, t_atom* av),void,任意のメッセージを出力。カスタムメッセージ形式の送信,"o:アウトレットポインタ, s:メッセージ名, ac:引数数, av:引数配列",outlet_anything(m_outlet, gensym(""mydata""), 2, args),1.0,現行,メッセージ名と引数を指定して出力
atom_setfloat,void atom_setfloat(t_atom* a, double f),void,アトム値を浮動小数点数に設定。アトムデータの初期化,"a:アトムポインタ, f:浮動小数点値",atom_setfloat(&a[0], 3.14),1.0,現行,アトムに浮動小数点値を設定
atom_setlong,void atom_setlong(t_atom* a, t_atom_long b),void,アトム値を整数に設定。アトムデータの初期化,"a:アトムポインタ, b:整数値",atom_setlong(&a[0], 42),1.0,現行,アトムに整数値を設定
atom_setsym,void atom_setsym(t_atom* a, t_symbol* s),void,アトム値をシンボルに設定。アトムデータの初期化,"a:アトムポインタ, s:シンボルポインタ",atom_setsym(&a[0], gensym(""test"")),1.0,現行,アトムにシンボル値を設定
atom_getfloat,double atom_getfloat(const t_atom* a),double,アトム値から浮動小数点数を取得。アトムデータの解析,"a:アトムポインタ",float64 value = atom_getfloat(argv),1.0,現行,アトムから浮動小数点値を取得
atom_getlong,t_atom_long atom_getlong(const t_atom* a),t_atom_long,アトム値から整数を取得。アトムデータの解析,"a:アトムポインタ",long value = atom_getlong(argv),1.0,現行,アトムから整数値を取得
atom_getsym,t_symbol* atom_getsym(const t_atom* a),t_symbol*,アトム値からシンボルを取得。アトムデータの解析,"a:アトムポインタ",t_symbol* s = atom_getsym(argv),1.0,現行,アトムからシンボル値を取得
buffer_ref_new,t_object* buffer_ref_new(t_object* x, t_symbol* name),t_object*,バッファ参照オブジェクトを作成。バッファアクセス用オブジェクト,"x:オブジェクトポインタ, name:バッファ名",buffer_ref_new(this, ps_buffer),6.0,現行,バッファオブジェクトへの参照を作成
buffer_ref_set,t_max_err buffer_ref_set(t_object* x, t_symbol* name),t_max_err,バッファ参照オブジェクトのターゲットを設定。参照先の変更,"x:バッファ参照オブジェクト, name:バッファ名",buffer_ref_set(x->buffer_ref, ps_buffer),6.0,現行,バッファ参照の再設定
buffer_ref_getobject,t_object* buffer_ref_getobject(t_object* x),t_object*,バッファオブジェクトを取得。バッファデータへのアクセス準備,"x:バッファ参照オブジェクト",t_buffer_obj* buffer_obj = buffer_ref_getobject(x->buffer_ref),6.0,現行,参照からバッファオブジェクトを取得
buffer_locksamples,float* buffer_locksamples(t_object* buffer_obj),float*,バッファサンプルデータをロック。安全なデータアクセス,"buffer_obj:バッファオブジェクト",float* samples = buffer_locksamples(buffer_obj),6.0,現行,バッファデータへの直接アクセスを開始
buffer_unlocksamples,void buffer_unlocksamples(t_object* buffer_obj),void,バッファサンプルデータのロックを解除。アクセス終了,"buffer_obj:バッファオブジェクト",buffer_unlocksamples(buffer_obj),6.0,現行,バッファデータへのアクセスを終了
buffer_getframecount,t_atom_long buffer_getframecount(t_object* buffer_obj),t_atom_long,バッファのフレーム数を取得。サイズ情報,"buffer_obj:バッファオブジェクト",t_atom_long frames = buffer_getframecount(buffer_obj),6.0,現行,バッファ内のサンプルフレーム数を取得
buffer_getchannelcount,t_atom_long buffer_getchannelcount(t_object* buffer_obj),t_atom_long,バッファのチャンネル数を取得。チャンネル情報,"buffer_obj:バッファオブジェクト",t_atom_long channels = buffer_getchannelcount(buffer_obj),6.0,現行,バッファのチャンネル数を取得
inlet<>,inlet<> input(object_base* owner, std::string description),inlet<>,Min API: オブジェクトのインレットを定義。入力ポート宣言,"owner:オブジェクト, description:説明",inlet<> input { this, ""Input inlet"" },7.0,現行,Min-APIスタイル。モダンC++インターフェース
outlet<>,outlet<> output(object_base* owner, std::string description),outlet<>,Min API: オブジェクトのアウトレットを定義。出力ポート宣言,"owner:オブジェクト, description:説明",outlet<> output { this, ""Output data"" },7.0,現行,Min-APIスタイル。モダンC++インターフェース
attribute<T>,attribute<T> attr(object_base* owner, std::string name, T default_value),attribute<T>,Min API: オブジェクトの属性を定義。パラメータ宣言,"owner:オブジェクト, name:属性名, default_value:デフォルト値",attribute<number> gain { this, ""gain"", 1.0 },7.0,現行,Min-APIスタイル。テンプレートベース
message<>,message<> msg(object_base* owner, std::string name, std::string description, function),message<>,Min API: メッセージハンドラーの定義。入力メッセージ処理,"owner:オブジェクト, name:メッセージ名, description:説明, function:コールバック関数",message<> bang { this, ""bang"", ""Process data"" },7.0,現行,Min-APIスタイル。コールバックベース
MIN_FUNCTION,atoms MIN_FUNCTION(const atoms& args),atoms,Min API: 関数定義マクロ。メッセージハンドラー内部の実装,args:関数に渡された引数,MIN_FUNCTION { return {}; },7.0,現行,関数定義用マクロ。戻り値はatoms型
buffer_reference,buffer_reference buffer(object_base* owner),buffer_reference,Min API: バッファ参照オブジェクト。バッファアクセス,"owner:オブジェクト",buffer_reference buffer { this },7.0,現行,Min-APIスタイル。バッファアクセス
dict::make,dict dict::make(),dict,Min API: 新しい辞書を作成。辞書オブジェクト生成,なし,auto d = dict::make(),7.0,現行,Min-APIスタイル。辞書生成
symbol,symbol sym(std::string name),symbol,Min API: シンボルオブジェクト。名前付き識別子,"name:シンボル名",symbol s = ""test"",7.0,現行,Min-APIスタイル。文字列からシンボル作成
atoms,std::vector<atom> atoms,std::vector<atom>,Min API: アトムの配列。引数やデータの集合,なし,atoms result = {1.0, ""test"", 42},7.0,現行,Min-APIスタイル。複数値の保持
MIN_DESCRIPTION,MIN_DESCRIPTION {text},void,Min API: オブジェクトの説明を定義。ヘルプテキスト設定,"text:説明テキスト",MIN_DESCRIPTION {""オーディオ信号を処理します""};,7.0,現行,オブジェクトドキュメント用マクロ
MIN_TAGS,MIN_TAGS {tags...},void,Min API: オブジェクトのタグを定義。カテゴリタグ設定,"tags:カテゴリタグ",MIN_TAGS {""audio"", ""filter"", ""effect""};,7.0,現行,オブジェクト分類用マクロ
MIN_AUTHOR,MIN_AUTHOR {author},void,Min API: オブジェクトの作者を定義。著者情報設定,"author:作者名",MIN_AUTHOR {""Jane Doe""};,7.0,現行,作者情報用マクロ
MIN_RELATED,MIN_RELATED {related...},void,Min API: 関連オブジェクトを定義。関連項目リスト,"related:関連オブジェクトリスト",MIN_RELATED {""filter~"", ""biquad~"", ""lores~""};,7.0,現行,関連オブジェクト情報用マクロ
MIN_ARGUMENT_FUNCTION,MIN_ARGUMENT_FUNCTION {code},void,Min API: 引数処理関数。引数解析コード,"code:引数処理コード",MIN_ARGUMENT_FUNCTION { this->value = arg; },7.0,現行,引数処理用マクロ
number,double number,double,Min API: 数値型。浮動小数点値,なし,attribute<number> frequency { this, ""frequency"", 440.0 };,7.0,現行,Min-APIでの数値型
sample,double sample,double,Min API: サンプル型。オーディオサンプル値,なし,sample s = 0.0;,7.0,現行,オーディオサンプル用の型
timer,timer timer_obj(object_base* owner, method func),timer,Min API: タイマーオブジェクト。定期的なイベント,"owner:オブジェクト, func:コールバック関数",timer metro { this, MIN_FUNCTION { /* 処理 */ return {}; } },7.0,現行,定期的なイベント生成
path,path path_obj(object_base* owner),path,Min API: パスオブジェクト。ファイルパス管理,"owner:オブジェクト",path p { this };,7.0,現行,ファイルパス操作用オブジェクト
queue,queue queue_obj(object_base* owner),queue,Min API: キューオブジェクト。非同期メッセージキュー,"owner:オブジェクト",queue q { this };,7.0,現行,スレッド間通信用キュー
time_value,time_value time_val(double value, std::string units),time_value,Min API: 時間値オブジェクト。単位付き時間値,"value:値, units:単位",time_value t { 100.0, ""ms"" };,7.0,現行,時間と単位の管理
object_base,class object_base,class,Min API: 基本オブジェクトクラス。オブジェクト基底,なし,class myobject : public object<myobject> { /* ... */ };,7.0,現行,Min-APIオブジェクトの基底クラス
sample_operator,sample operator()(sample input),sample,Min API: サンプル演算子。サンプル単位の処理,"input:入力サンプル",sample operator()(sample x) { return x * m_gain; },7.0,現行,オーディオ処理用演算子
ui_operator,ui<> ui_handler(object_base* owner),ui<>,Min API: UI操作ハンドラ。ユーザーインターフェース処理,"owner:オブジェクト",ui<> ui_handler { this, MIN_FUNCTION { /* UI処理 */ return true; } };,7.0,現行,UI処理用ハンドラ
threadsafe,enum threadsafe { no, yes },enum,Min API: スレッドセーフフラグ。属性のスレッド保護指定,なし,attribute<float, threadsafe::yes> value { this, ""value"", 1.0 };,7.0,現行,スレッドセーフ指定enum
limit,enum limit { none, clamp, fold, wrap },enum,Min API: 値制限フラグ。範囲外値の処理方法,なし,attribute<float, threadsafe::no, limit::clamp> gain { this, ""gain"", 0.5 };,7.0,現行,値制限方法指定enum
range,range r(T low, T high),range,Min API: 値の範囲指定。最小値と最大値の設定,"low:最小値, high:最大値",range { 0.0, 1.0 },7.0,現行,値の範囲制限指定
title,title t(std::string text),title,Min API: 表示タイトル指定。UI表示名の設定,"text:表示名",title { ""Gain Level"" },7.0,現行,UI表示名の設定
description,description d(std::string text),description,Min API: 説明テキスト。詳細説明の設定,"text:説明文",description { ""Control the gain level from 0.0 to 1.0"" },7.0,現行,詳細説明の設定
priority,priority p(int value),priority,Min API: 優先度設定。UI表示順の指定,"value:優先度",priority { 1 },7.0,現行,表示優先度の設定
update,update u(bool value),update,Min API: 更新フラグ。値変更時の通知設定,"value:更新フラグ",update { true },7.0,現行,更新通知の設定
enum_map,enum_map map,enum_map,Min API: 列挙型マッピング。名前と値の対応付け,なし,enum_map filter_types = { ""lowpass"", ""highpass"", ""bandpass"", ""notch"" };,7.0,現行,列挙値と名前のマッピング
c74::min,namespace c74::min,namespace,Min API: 名前空間。Min-API全体の名前空間,なし,using namespace c74::min;,7.0,現行,Min-APIのトップレベル名前空間
min::object,template <class T> class object : public object_base,class,Min API: オブジェクトテンプレート。CRTPベースクラス,"T:派生クラス型",class myobject : public object<myobject> { /* ... */ };,7.0,現行,オブジェクト定義用テンプレート
send,void send(std::string address, const atoms& args),void,Min API: メッセージ送信。指定アドレスにメッセージ送信,"address:宛先アドレス, args:引数",send(""source/value"", {1.0, 2.0});,7.0,現行,Max内部メッセージング
receive,receive recv(object_base* owner, std::string address),receive,Min API: メッセージ受信。指定アドレスからメッセージ受信,"owner:オブジェクト, address:受信アドレス",receive source { this, ""source"" };,7.0,現行,Max内部メッセージング受信
monitor,monitor mon(object_base* owner, std::string source),monitor,Min API: 値監視。他オブジェクトの値変更監視,"owner:オブジェクト, source:監視対象",monitor mon { this, ""some_object param"" };,7.0,現行,他オブジェクトの値監視
filewatcher,filewatcher fw(object_base* owner),filewatcher,Min API: ファイル監視。ファイル変更の検出,"owner:オブジェクト",filewatcher watch { this };,7.0,現行,ファイル変更の監視
atoms_getter,atoms get(),atoms,Min API: アトム取得メソッド。属性値の取得,なし,atoms values = my_attribute.get();,7.0,現行,属性値の取得メソッド
atoms_setter,void set(const atoms& args),void,Min API: アトム設定メソッド。属性値の設定,"args:設定値",my_attribute.set({1.0, ""text""});,7.0,現行,属性値の設定メソッド
atom,class atom,class,Min API: アトム値クラス。多様な型を格納可能,なし,atom a = 5.0;,7.0,現行,多様な型をカプセル化
sample_vector,using sample_vector = std::vector<sample>,alias,Min API: サンプルベクター。サンプル値の配列,なし,sample_vector buffer(512);,7.0,現行,サンプル値配列の型エイリアス
ext_job,ext_job job(object_base* owner, method m, std::vector<void*> args),ext_job,Min API: 外部ジョブ。バックグラウンド処理,"owner:オブジェクト, m:メソッド, args:引数",ext_job job { this, compute_background, { (void*)data } };,7.0,現行,バックグラウンド処理
dict,dict dict_obj(atoms args),dict,Min API: 辞書オブジェクト。キーと値のマッピング,"args:初期値",dict params { ""key1"", 1.0, ""key2"", ""value"" };,7.0,現行,辞書型データ構造
dict::operator[],const atom& operator[](symbol key) const,atom,Min API: 辞書アクセス演算子。キーによる値取得,"key:キー",auto value = my_dict[""parameter""];,7.0,現行,辞書からの値取得
clock,clock clk(object_base* owner),clock,Min API: クロックオブジェクト。タイミング制御,"owner:オブジェクト",clock metro { this };,7.0,現行,タイミング制御用
object_attr_getfloat,t_max_err object_attr_getfloat(void* x, t_symbol* s, double* d),t_max_err,オブジェクトから浮動小数点属性値を取得。属性値アクセス,"x:オブジェクト, s:属性名, d:値格納先",object_attr_getfloat(obj, gensym(""value""), &value),4.0,現行,属性値の取得。エラーコードを返す
object_attr_setfloat,t_max_err object_attr_setfloat(void* x, t_symbol* s, double d),t_max_err,オブジェクトの浮動小数点属性値を設定。属性値変更,"x:オブジェクト, s:属性名, d:設定値",object_attr_setfloat(obj, gensym(""value""), 1.0),4.0,現行,属性値の設定。エラーコードを返す
object_attr_getlong,t_max_err object_attr_getlong(void* x, t_symbol* s, long* v),t_max_err,オブジェクトから整数属性値を取得。属性値アクセス,"x:オブジェクト, s:属性名, v:値格納先",object_attr_getlong(obj, gensym(""size""), &size),4.0,現行,整数属性値の取得
object_attr_setlong,t_max_err object_attr_setlong(void* x, t_symbol* s, long v),t_max_err,オブジェクトの整数属性値を設定。属性値変更,"x:オブジェクト, s:属性名, v:設定値",object_attr_setlong(obj, gensym(""size""), 100),4.0,現行,整数属性値の設定
object_attr_getsym,t_max_err object_attr_getsym(void* x, t_symbol* s, t_symbol** sym),t_max_err,オブジェクトからシンボル属性値を取得。属性値アクセス,"x:オブジェクト, s:属性名, sym:値格納先",object_attr_getsym(obj, gensym(""name""), &sym),4.0,現行,シンボル属性値の取得
object_attr_setsym,t_max_err object_attr_setsym(void* x, t_symbol* s, t_symbol* sym),t_max_err,オブジェクトのシンボル属性値を設定。属性値変更,"x:オブジェクト, s:属性名, sym:設定値",object_attr_setsym(obj, gensym(""name""), gensym(""test"")),4.0,現行,シンボル属性値の設定
object_post,void object_post(void* x, const char* fmt, ...),void,オブジェクトからのメッセージをMaxコンソールに表示。情報出力,"x:オブジェクト, fmt:フォーマット文字列, ...:可変引数",object_post((t_object*)x, ""Value is %f"", value),4.0,現行,デバッグメッセージの出力
object_error,void object_error(void* x, const char* fmt, ...),void,オブジェクトからのエラーメッセージを表示。エラー報告,"x:オブジェクト, fmt:フォーマット文字列, ...:可変引数",object_error((t_object*)x, ""Invalid value""),4.0,現行,エラーメッセージの出力
defer,void* defer(void* obj, method fn, void* data, long ac, t_atom* av),void*,メソッド呼び出しをメインスレッドに遅延。スレッドセーフ処理,"obj:オブジェクト, fn:メソッド, data:データ, ac:引数数, av:引数配列",defer(x, (method)deferred_method, NULL, 0, NULL),4.0,現行,メインスレッドへの処理委譲
