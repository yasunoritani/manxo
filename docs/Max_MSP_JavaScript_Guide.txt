# Max/MSP JavaScript ユーザーガイド

## 概要

Max/MSPでは、JavaScriptを使用してテキストコードを書くことで、Maxの動作をプログラムすることができます。Max外部オブジェクトでできることのほとんどは、JavaScriptオブジェクトでも実現可能です。

JavaScriptを使用すると以下のことが可能になります：

- インレットからメッセージを受信する
- 内部状態を管理する
- アウトレットにメッセージを送信する
- カスタム描画とマウスイベントの処理
- イベントのスケジューリング
- パッチャーの状態の照会
- JavaScript APIを通じて公開されているその他の機能

## JavaScriptオブジェクト

Max/MSPのJavaScriptファミリーオブジェクトには、`v8`と`v8ui`（旧エンジンでは`js`と`jsui`）があり、JavaScriptを使用してカスタムMaxオブジェクトを定義できます。JavaScriptコードは別の`.js`ファイルとして読み込むか、パッチャーに埋め込むことができます。

> **注意**: Maxは現在JavaScriptエンジンを更新中で、2つのエンジンが利用可能です。旧バージョン1.8.5のエンジンと、新しいv8エンジンです。旧バージョンは下位互換性のためだけに維持されており、近い将来v8エンジンが旧エンジンの完全な代替となります。

主な違いは：
- `v8` - シンプルなMaxオブジェクト
- `v8ui` - 描画と対話コンテキストを提供

一般的なMaxオブジェクトの実装には`v8`を使用し、ユーザーインターフェイスオブジェクトの実装には`v8ui`を使用します。また、`@jspainter`属性を使用して任意のUIオブジェクトのデフォルトの描画動作を置き換えることもできます。

> **注意**: Maxは`node.script`というオブジェクトも提供しており、MaxからNodeプロセスを起動して対話することができます。Nodeは別プロセスで実行されます。

## jsthis

JavaScriptコードを呼び出す前に、Maxは`jsthis`のインスタンスを`this`にバインドします。これにより、Max固有の関数が使用できるようになります。これらの関数を参照する際に`this`を使用するのはオプションです。

```javascript
function bang() {
  // `post`関数は jsthis のメソッド
  post("こんにちは\n");
  
  // "this"を使用するのはオプションですが、
  // バインドされた jsthis インスタンスへの参照を明示的にします
  this.post("お会いできて嬉しいです\n");
}
```

### インレットとアウトレットの数

JavaScriptオブジェクトのインレットとアウトレットの数は、`jsthis`の`inlets`と`outlets`の値を設定することで指定します。

```javascript
inlets = 3; // オブジェクトは3つのインレットを持ちます
outlets = 2; // オブジェクトは2つのアウトレットを持ちます

function bang() {
  outlet(1, "こんにちは"); // 2番目のアウトレットから「こんにちは」を送信
}
```

## 引数

`js`または`v8`オブジェクトにファイル名の後に指定された引数は、JavaScriptコードに引数として渡されます。これらはJavaScriptコードで`jsarguments`プロパティとして利用できます。

```javascript
// 最初の引数は常にファイル名です
const filename = jsarguments[0];
const argumentsLength = jsarguments.length;

// ユーザーが指定した引数の配列を取得
const userArguments = jsarguments.slice(1, argumentsLength);

// 配列の分割代入を使った同様の処理
const [filename1, ...userArguments1] = jsarguments;
```

> **注意**: `jsui`と`v8ui`では、`@arguments`属性を使用してJavaScriptコードに引数を指定します。

## 入力

`v8`または`v8ui`オブジェクトのインレットで受信したメッセージは、同じ名前の関数を呼び出します。メッセージ名の後の引数はJavaScript関数に渡されます。

```javascript
function foo(a, b, c) {
  post(a, b, c);
}
```

この関数は、`foo 1 2 3`というメッセージに応答して「1, 2, 3」を表示します。

`v8`では、分割代入を使用して関数の引数を配列として取得できます：

```javascript
function foo(...args) {
  post(args.length);
}
```

最初の引数を単一の値として、残りを配列として取得することもできます：

```javascript
function foo(first, ...rest) {
  post(first, ...rest);
}
```

## 特別な関数

特別な名前で関数を定義して、Maxからの特定のフックに応答することができます。

### bang

bang メッセージへの応答として呼び出されます。

### msg_int, msg_float

それぞれ整数または浮動小数点数への応答として呼び出されます。

```javascript
function msg_int(a) {
  post(`整数を受信しました: ${a}\n`);
}

function msg_float(a) {
  post(`浮動小数点数を受信しました: ${a}\n`);
}
```

`msg_int`のみを定義した場合、受信した浮動小数点数は切り捨てられて`msg_int`に渡されます。同様に、`msg_float`のみが存在する場合、受信した整数は`msg_float`関数に渡されます。

### list

リスト（複数の要素を持ち、数値で始まるメッセージ）への応答として呼び出されます。

```javascript
function list(...elements) {
  post(`要素の長さ: ${elements.length}\n`);
  post(`最初の要素: ${elements[0]}\n`);
}
```

### anything

`v8`または`v8ui`オブジェクトが受信したメッセージシンボルに一致する特定の関数が見つからない場合に実行される`anything`関数を定義できます。メッセージの名前を知りたい場合は`messagename`プロパティを、どのインレットがメッセージを受信したかを知りたい場合は`inlet`プロパティを使用します。

```javascript
function anything(...args) {
  post(`メッセージ: ${this.messagename}\n`);
  post(`インレット: ${this.inlet}\n`);
  post(`引数: ${args}\n`);
}
```

### loadbang

`v8`または`v8ui`オブジェクトを含むパッチャーファイルが読み込まれたときに呼び出されます。この関数は、新しい`v8`または`v8ui`オブジェクトをインスタンス化してパッチャーに追加するときには呼び出されません。JavaScriptオブジェクトを含む既存のパッチャーファイルが読み込まれるときにのみ呼び出されます。

```javascript
function loadbang() {
  post("loadbang\n");
}
```

### getvalueof

`getvalueof`関数を定義すると、JavaScriptオブジェクトがpattrシステムに参加でき、Maxが`pattr`や`pattrstorage`を使用してJavaScriptオブジェクトの状態を保存できるようになります。`getvalueof`の戻り値は、`number`、`string`、`number`と`string`の`Array`、またはMax `Dict`にすることができます。

```javascript
let myvalue = 0.25;

function getvalueof() {
  return myvalue;
}
```

### setvalueof

`getvalueof`関数を定義した場合、`setvalueof`関数を定義してプリセットからJavaScriptオブジェクトの状態を復元できるようにすることができます。`getvalueof`の戻り値と同様に、`setvalueof`の引数は`number`、`string`、`number`と`string`の`Array`、またはMax `Dict`にすることができます。

```javascript
let myvalue;

function setvalueof(v) {
  myvalue = v;
}
```

### save

`save`という関数を定義すると、スクリプトはJavaScriptオブジェクトを含むパッチャーファイルに状態を埋め込むことができます。Maxはパッチャーが読み込まれるときに保存された状態を自動的に復元します。

状態の保存は、JavaScriptオブジェクトが再作成された直後にスクリプトが受け取るメッセージのセットを保存することで構成されます。これらのメッセージは、`save`関数内でのみ動作する特別なグローバル関数`embedmessage`を使用して保存されます。

例えば、オブジェクトが現在持っているカウベルの数を設定する`cowbells`関数があるとします：

```javascript
let numcowbells = 1;

function cowbells(a) {
  numcowbells = a;
}
```

JavaScriptオブジェクトを含むパッチャーが保存されるとき、現在のカウベルの数を保持したい場合、次のように`save`関数を定義します：

```javascript
function save() {
  embedmessage("cowbells", numcowbells);
}
```

`embedmessage`の最初の引数は文字列としての関数の名前です。`embedmessage`への追加の引数はこの関数への引数を提供します。これらの追加の引数は通常、保存したい状態の値になります。`embedmessage`の各呼び出しに対して、Maxは提供された引数でその関数を呼び出し、JavaScriptオブジェクトの状態を復元します。

### notifydeleted

`notifydeleted`メソッドは、JavaScriptオブジェクトが解放されるときに呼び出されます。

### 予約名

`v8`と`v8ui`オブジェクトは既に`compile`メッセージに対して何かを行います。したがって、JavaScriptコードで「compile」という名前の関数を定義しても、Maxからその関数を呼び出す方法はありません。ただし、自分のJavaScriptコードからローカルで関数を呼び出すことは可能です。

## 出力

指定されたアウトレットからメッセージを送信するには、`jsthis`メソッド`outlet`を呼び出します。

```javascript
function bang() {
  outlet(0, "bang");
}
```

## グローバルコードと初期化

JavaScriptオブジェクトが読み込まれると、Maxはスクリプトを最初から最後まで一度実行します。グローバルスコープで定義された変数はオブジェクトの寿命を通じて持続し、これらを使用して内部状態を保持できます。

```javascript
let counter = 0;

function count() {
  post(`カウント: ${++counter}`);
}
```

実際、Maxはインレットから関数を実行するときに、グローバル変数を`this`コンテキストにアタッチします。上記のコードは次のコードと同等です：

```javascript
this.counter = 0;

function count() {
  this.counter++;
  post(`カウント: ${this.counter}`);
}
```

> **注意**: グローバルコードの実行中、JavaScriptオブジェクトはまだ初期化中です。オブジェクトはアウトレットを持たず、まだどのパッチャーの一部でもありません。JavaScriptオブジェクトが作成された直後にアウトレットにメッセージを送信したい場合は、`loadbang`関数を定義してください。

## require

他のJavaScriptファイルからコードをインクルードするには、`require`を使用します。

```javascript
const lib = require("my-lib.js");

function call(a) {
  const computedValue = lib.compute(a);
  outlet(0, computedValue);
}
```

インクルードされるファイルはCommonJSモジュールである必要があります。関数と変数をエクスポートするには、`exports`のプロパティを設定するか、`module.exports`をエクスポートされたプロパティを含むオブジェクトで置き換える必要があります。

```javascript
// my-libの実装例
function compute(a) {
  return a + 10;
}

module.exports = {
  compute: compute
};
```

## プライベート（ローカル）関数

関数をローカルで使用したいが、Maxから呼び出されたくない場合は、その`local`プロパティを`1`に設定できます。例えば、`foo`関数を外部に公開したくない場合：

```javascript
foo.local = 1;

function foo() {
  post("Pdは*本当に*何の略ですか？");
}
```

これで、`foo`メッセージをJavaScriptオブジェクトに送信すると、Maxウィンドウに次のエラーが表示されます：

```
error: js: function foo is private
```

## 利用可能なAPI

MaxのJavaScriptエンジンはWebブラウザ内で実行されていないため、特定のAPIが利用できない場合があります。

- `JSON.stringify`と`JSON.parse`によるJSON直列化は利用可能です。
- `setImmediate`や`setTimeout`などのタイミング関数は利用できません。代わりに`Task`を使用してください。
- DOMはないため、`document.getElementById`などのドキュメントメソッドは利用できません。

## JavaScript、スレッド、優先度

Maxは、MIDIのような高いタイミング精度を必要とするイベントには高優先度スレッドを、ビデオの解凍などの長時間実行される操作には低優先度スレッドを使用してイベントをスケジュールします。Max内のJavaScriptエンジンは常に低優先度スレッドでコードを実行します。つまり、JavaScriptオブジェクトがMIDIオブジェクトから、または高優先度キューでイベントをスケジュールする他のオブジェクトからメッセージを受信すると、そのイベントは低優先度キューに延期されます。

## まとめ

Max/MSPのJavaScriptサポートは、視覚的なパッチングと強力なテキストベースのプログラミングを組み合わせることで、複雑な振る舞いをより簡潔に実装できます。最新のv8エンジン（`v8`および`v8ui`オブジェクト）を使用して、モダンなJavaScriptの機能を活用しながら、Maxアプリケーションの機能を拡張しましょう。