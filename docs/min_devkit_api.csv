function_name,signature,return_type,description,parameters,example_usage,version_compatibility
class_addmethod,void class_addmethod(t_class* c, method m, const char* name ...),void,クラスにメソッドを追加します。この関数はMax/MSPオブジェクトの作成時に使用されます。,"[{""name"": ""c"", ""type"": ""t_class*"", ""description"": ""クラスポインタ""}, {""name"": ""m"", ""type"": ""method"", ""description"": ""メソッド関数ポインタ""}, {""name"": ""name"", ""type"": ""const char*"", ""description"": ""メソッド名""}]","class_addmethod(c, (method)myobject_bang, ""bang"", 0);",Max 5.0+
object_alloc,t_object* object_alloc(t_class* c),t_object*,指定されたクラスのオブジェクトを割り当てます。,"[{""name"": ""c"", ""type"": ""t_class*"", ""description"": ""オブジェクトを作成するクラス""}]","t_object* obj = object_alloc(my_class);",Max 5.0+
object_free,void object_free(t_object* x),void,オブジェクトのメモリを解放します。,"[{""name"": ""x"", ""type"": ""t_object*"", ""description"": ""解放するオブジェクト""}]","object_free(x);",Max 5.0+
class_new,t_class* class_new(const char* name, method new_method, method free_method, size_t size, method dummy1, method dummy2, method type),t_class*,新しいクラスを作成します。,"[{""name"": ""name"", ""type"": ""const char*"", ""description"": ""クラス名""}, {""name"": ""new_method"", ""type"": ""method"", ""description"": ""newインスタンスメソッド""}, {""name"": ""free_method"", ""type"": ""method"", ""description"": ""freeインスタンスメソッド""}, {""name"": ""size"", ""type"": ""size_t"", ""description"": ""オブジェクトのサイズ""}, {""name"": ""dummy1"", ""type"": ""method"", ""description"": ""未使用（0を渡す）""}, {""name"": ""dummy2"", ""type"": ""method"", ""description"": ""未使用（0を渡す）""}, {""name"": ""type"", ""type"": ""method"", ""description"": ""タイプメソッド""}]","t_class* c = class_new(""myobject"", (method)myobject_new, (method)myobject_free, sizeof(t_myobject), 0L, 0L, 0);",Max 5.0+
outlet_bang,void outlet_bang(void* outlet),void,バング値をアウトレットに送信します。,"[{""name"": ""outlet"", ""type"": ""void*"", ""description"": ""出力先のアウトレット""}]","outlet_bang(myobject->bang_out);",Max 5.0+
outlet_int,void outlet_int(void* outlet, long n),void,整数値をアウトレットに送信します。,"[{""name"": ""outlet"", ""type"": ""void*"", ""description"": ""出力先のアウトレット""}, {""name"": ""n"", ""type"": ""long"", ""description"": ""送信する整数値""}]","outlet_int(myobject->int_out, 42);",Max 5.0+
outlet_float,void outlet_float(void* outlet, double f),void,浮動小数点値をアウトレットに送信します。,"[{""name"": ""outlet"", ""type"": ""void*"", ""description"": ""出力先のアウトレット""}, {""name"": ""f"", ""type"": ""double"", ""description"": ""送信する浮動小数点値""}]","outlet_float(myobject->float_out, 3.14159);",Max 5.0+
outlet_list,void outlet_list(void* outlet, t_symbol* s, short ac, t_atom* av),void,アトムのリストをアウトレットに送信します。,"[{""name"": ""outlet"", ""type"": ""void*"", ""description"": ""出力先のアウトレット""}, {""name"": ""s"", ""type"": ""t_symbol*"", ""description"": ""リストのセレクタ（通常はgensym(""list"")）""}, {""name"": ""ac"", ""type"": ""short"", ""description"": ""アトムの数""}, {""name"": ""av"", ""type"": ""t_atom*"", ""description"": ""アトムの配列""}]","outlet_list(myobject->list_out, gensym(""list""), 3, myobject->list_atoms);",Max 5.0+
atom_setlong,void atom_setlong(t_atom* a, long l),void,アトムに整数値を設定します。,"[{""name"": ""a"", ""type"": ""t_atom*"", ""description"": ""設定するアトム""}, {""name"": ""l"", ""type"": ""long"", ""description"": ""設定する整数値""}]","atom_setlong(&myatom, 123);",Max 5.0+
atom_setfloat,void atom_setfloat(t_atom* a, double f),void,アトムに浮動小数点値を設定します。,"[{""name"": ""a"", ""type"": ""t_atom*"", ""description"": ""設定するアトム""}, {""name"": ""f"", ""type"": ""double"", ""description"": ""設定する浮動小数点値""}]","atom_setfloat(&myatom, 3.14);",Max 5.0+
atom_setsym,void atom_setsym(t_atom* a, t_symbol* s),void,アトムにシンボルを設定します。,"[{""name"": ""a"", ""type"": ""t_atom*"", ""description"": ""設定するアトム""}, {""name"": ""s"", ""type"": ""t_symbol*"", ""description"": ""設定するシンボル""}]","atom_setsym(&myatom, gensym(""hello""));",Max 5.0+
gensym,t_symbol* gensym(const char* s),t_symbol*,文字列からシンボルを生成します。,"[{""name"": ""s"", ""type"": ""const char*"", ""description"": ""シンボルとして登録する文字列""}]","t_symbol* sym = gensym(""bang"");",Max 5.0+
c74::min::atoms,std::vector<atom>,object,Min-DevKit用のアトムのベクトルです。この型はMaxのアトムのラッパーとして機能します。,"[]","atoms a = {1, 2.0, ""three""};",Max 7.0+
c74::min::inlet<>,inlet<>,object,Min-DevKit用の入力端子クラス。テンプレートパラメータにより異なるタイプの入力を処理できます。,"[]","inlet<> input {this, ""(bang) trigger an output""};",Max 7.0+
c74::min::outlet<>,outlet<>,object,Min-DevKit用の出力端子クラス。テンプレートパラメータにより異なるタイプの出力を生成できます。,"[]","outlet<> output {this, ""(bang) output""};",Max 7.0+
min_object_register,c74::min::object_base* min_object_register(const char* name),c74::min::object_base*,Min-DevKit外部オブジェクトを登録します。,"[{""name"": ""name"", ""type"": ""const char*"", ""description"": ""登録するオブジェクト名""}]","auto obj = min_object_register(""myobject"");",Max 7.0+
number_from_atoms,number number_from_atoms(const atoms& args),number,アトムのベクトルから数値を抽出します。,"[{""name"": ""args"", ""type"": ""const atoms&"", ""description"": ""数値を抽出するアトム配列""}]","auto num = number_from_atoms(args);",Max 7.0+
symbol_from_atoms,symbol symbol_from_atoms(const atoms& args),symbol,アトムのベクトルからシンボルを抽出します。,"[{""name"": ""args"", ""type"": ""const atoms&"", ""description"": ""シンボルを抽出するアトム配列""}]","auto sym = symbol_from_atoms(args);",Max 7.0+
string_from_atoms,string string_from_atoms(const atoms& args),string,アトムのベクトルから文字列を抽出します。,"[{""name"": ""args"", ""type"": ""const atoms&"", ""description"": ""文字列を抽出するアトム配列""}]","auto str = string_from_atoms(args);",Max 7.0+
c74::min::message<>,message<>,function,メッセージハンドラを定義するためのクラス。,"[]","message<> bang {this, ""bang"", ""Trigger output"", [this]{ /* code */ }};",Max 7.0+
c74::min::attribute<>,attribute<>,property,オブジェクトの属性（パラメータ）を定義するためのクラス。,"[]","attribute<int> count {this, ""count"", 1, range {1, 100}};",Max 7.0+
