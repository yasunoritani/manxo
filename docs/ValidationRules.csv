rule_type,pattern,description,severity,suggestion,example_fix
syntax,inlet_(\w+) without valid object,オブジェクト参照なしでのインレット作成。this ポインタが渡されていない,error,this->インスタンス変数を使用,inlet_new(this, ""signal"")
logic,outlet connection without creation,作成されていないアウトレットへの接続。未初期化アウトレットを使用,error,事前にoutlet_newを呼び出す,outlet_new(this, ""signal"");
performance,repeated jit.matrix creation in loop,ループ内でのjit.matrix再生成。毎フレームでメモリ再割り当て,warning,ループ外で一度だけ作成,jit.matrix生成をループ前に移動
compatibility,Max8専用関数をMax7で使用,バージョン非互換の関数呼び出し。古いバージョンで未定義,error,互換性のある代替関数を使用,代替APIを使用するよう変更
best_practice,direct buffer access without locking,バッファロックなしでの直接アクセス。データ競合の可能性,warning,適切なロック機構を使用する,buffer_locksamples()とbuffer_unlocksamples()を使用
style,inconsistent method naming,一貫性のないメソッド命名。mixedCase と snake_case の混在,info,命名規則に従う,camelCaseまたはsnake_caseに統一
thread_safety,UI操作をオーディオスレッドから行う,スレッド安全でないUI操作。スレッド間衝突の危険性,error,defer_low()でUIスレッドに処理を移譲,defer_low(uimethod, this, param1, param2)
memory,missing deallocation,メモリ解放忘れ。メモリリークを引き起こす,error,destructor内でメモリ解放,sysmem_freeptr(allocated_memory)
exception,uncaught exception,例外ハンドリングがない。未処理例外でクラッシュする可能性,warning,try-catchブロックで囲む,try { ... } catch (std::exception& e) { error(e.what()); }
resource,file not closed,ファイルクローズ忘れ。ファイルハンドルリークの可能性,warning,リソース使用後に適切に解放する,fclose(fp);
security,user input without validation,ユーザー入力の検証が不十分。悪意ある入力で不正動作,error,値の範囲チェックを追加,if (value >= min_val && value <= max_val) { /*処理*/ }
initialization,uninitialized variable use,未初期化変数の使用。不定値によるバグの可能性,error,変数を適切に初期化,float value = 0.0f;
numeric,division by zero,ゼロによる除算。無限大や非数値結果の可能性,error,ゼロチェックを追加,if (denominator != 0) { result = numerator / denominator; }
buffer,out of bounds access,バッファ境界外アクセス。無効なメモリ領域の読み書き,error,境界チェックを追加,if (index < buffer_size) { value = buffer[index]; }
concurrency,shared resource without mutex,ミューテックスなしの共有リソースアクセス。データ競合の危険,error,クリティカルセクションを保護,critical_enter(x->mutex); /*処理*/ critical_exit(x->mutex);
performance,inefficient memory copy,非効率なメモリコピー。大量データの不要なコピー,warning,参照または移動セマンティクスを使用,jit_object_method(dst_matrix, _jit_sym_frommatrix, src_matrix, NULL);
audio,blocking operation in audio thread,オーディオスレッドでのブロッキング操作。音声途切れの原因,error,非ブロッキング設計に変更,処理を分割しスレッド間通信を使用
signal_chain,missing perform method,シグナル処理メソッドが未定義。DSPチェーンに参加できない,error,DSPメソッドを定義,void myobj_perform(t_myobj* x, t_object* dsp64, double** ins, long numins, double** outs, long numouts, long frames, long flags, void* userparam) { /*処理*/ }
lifecycle,missing free method,デストラクタメソッドの欠如。リソース解放されない,error,クラスにfreeメソッドを追加,void myobj_free(t_myobj* x) { /*解放処理*/ }
documentation,missing inlet/outlet documentation,インレット/アウトレットの説明不足。使用方法が不明瞭,warning,説明コメントを追加,inlet<> input { this, ""(float) Input value to process"" };
ui,hardcoded coordinates,ハードコードされた座標値。画面サイズ変更に対応できない,warning,相対座標または計算値を使用,float x_pos = box_rect.width * relative_x;
type_safety,type conversion without check,型チェックなしの変換。不正なデータ型でクラッシュ,warning,型チェックを追加,if (atom_gettype(argv) == A_FLOAT) { value = atom_getfloat(argv); }
efficiency,repeated symbol lookup,シンボル繰り返しルックアップ。gensym()の多用,warning,シンボルをキャッシュ,static t_symbol* ps_name = NULL; if (!ps_name) ps_name = gensym(""name"");
min_api,non-type-safe message argument access,型安全でないメッセージ引数アクセス。誤った型変換の可能性,warning,型付きアクセサーを使用,float value = args[0];
interoperability,incompatible data format,互換性のないデータ形式。他のオブジェクトと連携できない,error,標準形式に変換,jit_object_method(matrix, _jit_sym_convert, _jit_sym_char);
scaling,fixed-size data structures,固定サイズのデータ構造。大量データ処理に制限,warning,動的割り当てに変更,data = (float*)sysmem_resizeptr(data, new_size * sizeof(float));
threading,blocking UI thread,UIスレッドのブロッキング。インターフェース応答性低下,warning,バックグラウンドスレッドに処理を移動,worker_thread_execute(x->worker, process_data, x);
audio_quality,denormals not handled,非正規化数の未処理。CPU使用率急増の可能性,warning,非正規化数を適切に処理,if (fabs(value) < 1e-20) value = 0.0f;
resource_management,excessive resource usage,過剰なリソース使用。メモリや処理能力の浪費,warning,リソース使用を最適化,matrix_size = MIN(desired_size, MAX_EFFICIENT_SIZE);
algorithm,inefficient algorithm,非効率なアルゴリズム。O(n²)以上の計算量,warning,より効率的なアルゴリズムに変更,std::sort(data, data + size); // バブルソートの代わり
interface,inconsistent argument order,一貫性のない引数順序。APIの使いにくさの原因,warning,標準パターンに統一,function(target, source, size); // 統一された順序
multi_channel,single channel assumption,単一チャンネル前提のコード。マルチチャンネル非対応,warning,チャンネル数を動的に処理,for (int ch = 0; ch < channels; ch++) { /*処理*/ }
max_api,deprecated API usage,非推奨APIの使用。互換性問題やセキュリティリスク,error,最新APIに更新,jit_gl_texture_2dに変更 (jit_gl_textureの代わり)
jitter,matrix dimension mismatch,マトリックス次元の不一致。処理エラーの原因,error,次元の一致を確認,if (dim[0] != expected_width || dim[1] != expected_height) { /*エラー処理*/ }
jitter_gl,missing gl_context check,GLコンテキスト未確認。不正なGLコマンド呼び出し,error,コンテキスト存在確認を追加,if (jit_gl_get_context() == NULL) { object_error((t_object *)x, ""No valid GL context""); return; }
audio_processing,signal rate mismatch,シグナルレート不一致。予期せぬ音声効果,warning,サンプルレート変換または確認,if (x->sr != sys_getsr()) { x->sr = sys_getsr(); recalculate_coefficients(x); }
memory_alignment,unaligned memory access,アラインメント不正なメモリアクセス。パフォーマンス低下,warning,アラインメント適切なアクセスに変更,float *aligned_ptr = (float *)((((intptr_t)buffer + 15) >> 4) << 4);
exception_handling,catch(...) without specific handler,汎用例外捕捉のみ。例外詳細情報の喪失,warning,具体的な例外型を捕捉,try { ... } catch (std::exception& e) { ... } catch (...) { ... }
buffer_overflow,fixed size buffer with unchecked input,固定サイズバッファと未チェック入力。バッファオーバーフロー,error,サイズチェックまたは動的バッファ使用,if (input_size < sizeof(buffer)) { strcpy(buffer, input); } else { /* エラー処理 */ }
thread_synchronization,race condition in shared data,共有データの競合状態。タイミング依存のバグ,error,適切な同期プリミティブを使用,std::lock_guard<std::mutex> lock(mutex); // データアクセス前にロック
dead_code,unreachable code,到達不能コード。無効な条件分岐,info,不要コードを削除または条件を修正,if (always_true) { // 処理 } /* 削除: else { 到達不能コード } */
infinite_loop,potential infinite loop,無限ループの可能性。終了条件が不明確,error,明示的なループ終了条件を追加,while (condition) { /* 処理 */ if (++counter > max_iterations) break; }
resource_leak,opened handle not released,オープンハンドルの未解放。リソースリーク,error,適切なクリーンアップコードを追加,HANDLE h = OpenXXX(); /* 処理 */ CloseXXX(h);
error_handling,error code not checked,エラーコード未チェック。エラー状態の無視,warning,戻り値/エラーコードの確認を追加,if ((err = function()) != MAX_ERR_NONE) { object_error((t_object *)x, ""Error: %d"", err); return; }
localization,hardcoded strings,ハードコードされた文字列。国際化対応の欠如,info,リソース/定数を使用,object_error((t_object *)x, LOCALIZED_ERROR_MESSAGE_KEY);
ui_responsiveness,long operation in UI thread,UI スレッドでの長時間操作。UI応答性の低下,warning,バックグラウンド処理または進捗表示,defer_low(x, (method)background_process, data);
audio_dropouts,heavy processing in audio thread,オーディオスレッドでの重い処理。音声途切れの原因,error,処理の最適化または分離,// DSP処理を最適化、または別スレッドに処理を移動
floating_point,floating point comparison,浮動小数点の直接比較。丸め誤差による問題,warning,イプシロン値を用いた比較,if (fabs(a - b) < EPSILON) { /* 等価とみなす */ }
buffer_management,buffer size not power of two,2の累乗でないバッファサイズ。FFT等での非効率,warning,2の累乗サイズに調整,size_t buffer_size = 1 << (int)ceil(log2(requested_size));
memory_fragmentation,frequent small allocations,頻繁な小さなメモリ割り当て。メモリ断片化,warning,メモリプールまたはバッチ確保,x->memory_pool = sysmem_newptr(POOL_SIZE); // 一括確保
denormal,denormal values in audio path,オーディオパスでの非正規化数。CPU使用率上昇,warning,非正規化数を検出して処理,if (fabs(sample) < 1.0e-20) sample = 0.0f;
initialization_order,object used before initialization,初期化前のオブジェクト使用。未定義動作,error,初期化後の使用を保証,if (initialized) { /* 処理 */ } else { /* 初期化またはエラー */ }
thread_affinity,DSP performed outside audio thread,オーディオスレッド外でのDSP処理。同期問題の可能性,warning,適切なスレッドで処理,// オーディオ処理はperformメソッド内に限定
parameter_validation,missing parameter validation,パラメータ検証の欠如。無効値によるバグ,warning,引数の検証コードを追加,if (param < 0 || param > 1.0) { object_error((t_object *)x, ""Invalid parameter""); return; }
null_pointer,potential null pointer dereference,NULL参照の可能性。クラッシュの原因,error,NULL チェックを追加,if (ptr != NULL) { /* ポインタ使用 */ } else { /* エラー処理 */ }
file_io,unbuffered file I/O in audio thread,オーディオスレッドで非バッファリングI/O。音声途切れ,error,バッファリングI/Oまたは別スレッド処理,// ファイルI/Oをバックグラウンドスレッドに移動
signal_vector_size,fixed vector size assumption,固定ベクトルサイズ前提。可変サイズ非対応,warning,動的サイズ対応コードに変更,// sys_getblksize()の値に基づいて処理
memory_ordering,memory ordering issue,メモリ順序問題。並列処理での不整合,error,適切な同期プリミティブを使用,std::atomic<int> counter; // 単純な変数の代わりに
attribute_modification,attribute modified during perform,演奏中の属性変更。予期せぬ音声効果,warning,パラメータ平滑化を使用,// 急激な変化を避けるためのパラメータスムージング
gl_resource_management,GL resource not properly released,GL リソースの不適切な解放。リソースリーク,error,適切なGL解放コードを追加,if (texture) glDeleteTextures(1, &texture);
jitter_performance,inefficient matrix operation,非効率なマトリックス操作。パフォーマンス低下,warning,最適化されたJitterメソッドを使用,// jit.opなどの最適化されたオブジェクトを使用
max_path,hardcoded file paths,ハードコードされたファイルパス。OS間の互換性問題,warning,パスオブジェクトまたは相対パスを使用,path_toabsolutesystempath(path, filename, outpath);
attribute_thread_safety,thread unsafe attribute access,スレッド安全でない属性アクセス。データ競合,error,スレッドセーフな属性アクセスに変更,attribute<float, threadsafe::yes> value;
message_thread_safety,thread unsafe message handling,スレッド安全でないメッセージ処理。データ競合,error,スレッドセーフな設計に変更,defer_low(x, (method)safe_message_handler, a, b);
buffer_consistency,buffer modification during playback,再生中のバッファ変更。音声アーティファクト,warning,二重バッファリングを使用,// 変更用と再生用の別バッファを使いスワップ
signal_connection,audio connection to non-audio object,非オーディオオブジェクトへの信号接続。無効な接続,error,適切なオーディオパスに修正,// シグナルは~付きオブジェクトにのみ接続
timing,high-precision timing in non-RT thread,非RTスレッドでの高精度タイミング要求。不安定な動作,warning,適切なタイミングメカニズムを使用,clock_delay(x->clock, milliseconds);
concurrency_model,mixing concurrency models,複数の並行性モデルの混在。同期問題のリスク,warning,一貫した並行性モデルを使用,// スレッド、非同期コールバック、イベントループの一貫した使用
min_dsp,inefficient MIN_FUNCTION for DSP,DSP用のMIN_FUNCTION非効率。オーバーヘッド増加,warning,operator() メソッドを使用,sample operator()(sample x) { return x * gain; }
error_propagation,swallowed errors,エラーの抑制。問題の発見と診断の困難化,warning,エラー状態を適切に伝播,if (err != MAX_ERR_NONE) return err; // エラーを上位に伝える
audio_feedback,potential audio feedback loop,オーディオフィードバックループの可能性。発振リスク,warning,フィードバックパスに制限を追加,if (feedback > 0.99f) feedback = 0.99f; // 上限設定
dsp_load,excessive DSP load,過剰なDSP負荷。システムパフォーマンス低下,warning,処理を最適化または間引き,if (!(tick_count % decimation_factor)) { /* 処理 */ }
ui_event_handling,ui event handler doesn't return value,戻り値なしのUIイベントハンドラ。イベント伝播制御不能,warning,適切な戻り値を返す,return 1; // イベント処理完了を示す
buffer_alignment,buffer not aligned for SIMD,SIMDに適さないバッファアラインメント。最適化の妨げ,info,アラインメントを調整,float *aligned_ptr = (float *)(((uintptr_t)ptr + 15) & ~15);
audio_glitch,potential audio glitch,音声グリッチの可能性。音質低下,warning,信号の連続性を確保,// 急激な値変化を避けるスムージングを実装
multithreading,potential deadlock,デッドロックの可能性。システム停止のリスク,error,リソースの取得順序を一貫させる,// 常に同じ順序でロックを取得する設計に変更
signal_discontinuity,signal discontinuity,信号の不連続性。クリックノイズの原因,warning,値変化を滑らかにする,output = prev_output + (target - prev_output) * smooth_factor;
real_time_constraint,real-time constraint violation,リアルタイム制約違反。処理遅延問題,error,処理時間を短縮,// 処理を最適化または複数フレームに分割
performance_critical,inefficient operation in hot path,高頻度パスでの非効率な操作。パフォーマンスボトルネック,warning,ホットパスを最適化,// ループ内計算を外部に移動、キャッシュ活用
min_attribute,missing default for min attribute,Min属性のデフォルト値なし。初期状態が不明確,warning,明示的なデフォルト値を設定,attribute<float> gain { this, ""gain"", 1.0 };
signal_rate,sample rate dependent constants,サンプルレート依存の定数。レート変更時に問題,warning,実行時計算または再計算に変更,// サンプルレート変更時に係数を再計算
numerical_stability,numerical instability risk,数値的不安定性のリスク。計算精度の問題,warning,数値的に安定なアルゴリズムを使用,// 桁落ちを避ける計算順序に変更
thread_priority,inappropriate thread priority,不適切なスレッド優先度。システム応答性への影響,warning,適切な優先度を設定,systhread_setpriority(x->thread, priority);
error_reporting,silent failure,エラーの無言の失敗。問題の発見困難,warning,エラーを明示的に報告,object_error((t_object *)x, ""Operation failed: %s"", error_message);
jitter_gl_state,GL state not restored,GLステートの未復元。予期せぬ描画結果,warning,GL状態の保存と復元,glPushAttrib(GL_ALL_ATTRIB_BITS); /* 処理 */ glPopAttrib();
recursion,excessive recursion depth,過度の再帰深度。スタックオーバーフローのリスク,error,反復的アプローチまたは深度制限を使用,if (depth > MAX_RECURSION_DEPTH) return; // 深度制限
synchronization,missing synchronization,同期化の欠如。競合状態の可能性,error,適切な同期プリミティブを使用,critical_enter(x->lock); /* 処理 */ critical_exit(x->lock);
min_message,inefficient message processing,非効率なメッセージ処理。パフォーマンス低下,warning,メッセージ処理を最適化,message<> bang { this, ""bang"", MIN_FUNCTION { return {}; } };
value_clipping,missing value clipping,値のクリッピングがない。有効範囲外の値,warning,適切な範囲クリッピングを追加,value = CLAMP(value, min_value, max_value);
system_call,blocking system call,ブロッキングシステムコール。処理の中断,warning,非ブロッキング代替手段を使用,// 非ブロッキングI/O、非同期呼び出しに変更
exception_in_destructor,exception thrown in destructor,デストラクタ内での例外発生。未定義動作,error,デストラクタでのエラー処理を修正,try { /* 処理 */ } catch (...) { /* ログ記録のみ */ }
performance_regression,performance regression,パフォーマンス退行。以前より処理効率低下,warning,パフォーマンス低下原因を解消,// 新たに導入された非効率な処理を最適化
object_creation,object created in audio thread,オーディオスレッドでのオブジェクト生成。メモリ確保遅延,error,事前にオブジェクトを作成,// 初期化時にオブジェクトを作成しておく
audio_buffer_size,fixed audio buffer size assumption,固定オーディオバッファサイズ前提。可変サイズ非対応,warning,動的バッファサイズに対応,x->buffer_size = sys_getblksize();
min_initialization,object used before min initialization,初期化前のMinオブジェクト使用。未定義動作,error,適切な初期化順序を確保,// constructorでの初期化完了を確認
attribute_update,missing attribute update notification,属性更新通知の欠如。UI更新されない,warning,属性変更後の通知を追加,object_notify(x, _sym_modified, NULL);
ui_refresh,missing UI refresh,UI更新の欠如。表示が古い状態のまま,warning,適切なUIリフレッシュ呼び出しを追加,jbox_redraw((t_jbox *)x);
error_handling_locality,distant error handling,エラー処理が発生場所から離れている。追跡困難,info,エラー発生場所の近くでハンドリング,if (error) { /* すぐにエラー処理 */ }
max_min_consistency,mixing Max C and Min APIs,MaxのCスタイルとMinのC++スタイルの混在。一貫性欠如,warning,一貫したAPI使用に統一,// 同じ機能には同じAPIスタイルを使用
reentrancy,non-reentrant code,リエントラント性のないコード。再入による問題,warning,リエントラントな設計に変更,// 状態を引数として渡す設計に変更
code_complexity,excessive cyclomatic complexity,過度の循環的複雑度。理解・保守の困難,info,コードを小さな関数に分割,// 長い関数を意味のある小さな関数に分割
buffer_edge_cases,missing buffer edge case handling,バッファエッジケース処理の欠如。境界値問題,warning,エッジケース処理を追加,if (buffer_size == 0) return 0; // 空バッファの処理
plugin_memory_isolation,shared memory across plugin instances,プラグインインスタンス間の共有メモリ。予期せぬ干渉,error,インスタンス固有のメモリを使用,// static変数の代わりにインスタンス変数を使用
min_exception_safety,exception unsafe Min code,例外安全でないMinコード。リソースリークの可能性,warning,例外安全な設計に変更,// RAII、スマートポインタ、try-catchブロックを使用
resource_cleanup,resource cleanup in wrong thread,誤ったスレッドでのリソース解放。解放失敗の可能性,warning,適切なスレッドでクリーンアップ,// リソースを確保したのと同じスレッドで解放