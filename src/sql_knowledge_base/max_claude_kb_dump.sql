PRAGMA foreign_keys=OFF;
BEGIN TRANSACTION;
CREATE TABLE max_objects (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL UNIQUE,  -- オブジェクト名（例: metro, jit.gl.render）
    description TEXT,           -- オブジェクトの説明
    category TEXT,              -- カテゴリ（例: time, ui, audio, video）
    version_compatibility TEXT, -- バージョン互換性情報
    inlets TEXT,                -- 入力口情報（JSON形式）
    outlets TEXT,               -- 出力口情報（JSON形式）
    is_ui_object INTEGER,       -- UIオブジェクトかどうか（0=false, 1=true）
    is_deprecated INTEGER,      -- 非推奨かどうか（0=false, 1=true）
    alternative TEXT,           -- 非推奨の場合の代替オブジェクト
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
INSERT INTO max_objects VALUES(1,'*~','*~ オブジェクト','audio/math','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(2,'+~','+~ オブジェクト','audio/math','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(3,'-~','-~ オブジェクト','audio/math','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(4,'adc~','adc~ オブジェクト','audio/io','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(5,'adsr~','adsr~ オブジェクト','audio/control','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(6,'attrui','attrui オブジェクト','ui/attributes','Max 8.0+','[]','[]',1,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(7,'avg~','avg~ オブジェクト','audio/analysis','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(8,'bach.roll','bach.roll オブジェクト','music/notation','Max 8.0+','[]','[]',1,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(9,'bach.score','bach.score オブジェクト','music/notation','Max 8.0+','[]','[]',1,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(10,'bendin','bendin オブジェクト','midi','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(11,'bendout','bendout オブジェクト','midi','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(12,'biquad~','biquad~ オブジェクト','audio/filter','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(13,'bucket','bucket オブジェクト','data','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(14,'buddy','buddy オブジェクト','control','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(15,'buffer~','buffer~ オブジェクト','audio/buffer','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(16,'button','button オブジェクト','ui','Max 8.0+','[]','[]',1,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(17,'capture','capture オブジェクト','data','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(18,'change','change オブジェクト','control','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(19,'click~','click~ オブジェクト','audio/gen','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(20,'clip~','clip~ オブジェクト','audio/fx','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(21,'clocker','clocker オブジェクト','timing','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(22,'coll','coll オブジェクト','data','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(23,'comment','comment オブジェクト','ui','Max 8.0+','[]','[]',1,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(24,'counter','counter オブジェクト','math','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(25,'count~','count~ オブジェクト','audio/control','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(26,'ctlin','ctlin オブジェクト','midi','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(27,'ctlout','ctlout オブジェクト','midi','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(28,'curve~','curve~ オブジェクト','audio/control','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(29,'cycle~','cycle~ オブジェクト','audio/gen','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(30,'dac~','dac~ オブジェクト','audio/io','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(31,'defer','defer オブジェクト','timing','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(32,'delay','delay オブジェクト','timing','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(33,'delay~','delay~ オブジェクト','audio/delay','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(34,'dial','dial オブジェクト','ui','Max 8.0+','[]','[]',1,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(35,'dict','dict オブジェクト','data','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(36,'downsamp~','downsamp~ オブジェクト','audio/resample','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(37,'drunk','drunk オブジェクト','math','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(38,'edge~','edge~ オブジェクト','audio/analysis','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(39,'env~','env~ オブジェクト','audio/analysis','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(40,'fftin~','fftin~ オブジェクト','audio/fft','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(41,'fftout~','fftout~ オブジェクト','audio/fft','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(42,'filewatch','filewatch オブジェクト','system','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(43,'filter~','filter~ オブジェクト','audio/filter','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(44,'flonum','flonum オブジェクト','ui/data','Max 8.0+','[]','[]',1,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(45,'follow','follow オブジェクト','timing','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(46,'fromsymbol','fromsymbol オブジェクト','conversion','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(47,'ftom~','ftom~ オブジェクト','audio/conversion','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(48,'funbuff','funbuff オブジェクト','data','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(49,'funnel','funnel オブジェクト','list','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(50,'gain~','gain~ オブジェクト','audio','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(51,'gate','gate オブジェクト','control','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(52,'gate~','gate~ オブジェクト','audio/control','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(53,'gen~','gen~ オブジェクト','msp/gen','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(54,'groove~','groove~ オブジェクト','audio/playback','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(55,'hip~','hip~ オブジェクト','audio/filter','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(56,'iter','iter オブジェクト','list','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(57,'jit.brcosa','jit.brcosa オブジェクト','jitter/fx','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(58,'jit.char2float','jit.char2float オブジェクト','jitter/conversion','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(59,'jit.concat','jit.concat オブジェクト','jitter/data','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(60,'jit.dimmap','jit.dimmap オブジェクト','jitter/data','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(61,'jit.fill','jit.fill オブジェクト','jitter/data','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(62,'jit.gen','jit.gen オブジェクト','jitter/gen','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(63,'jit.gl.gridshape','jit.gl.gridshape オブジェクト','jitter/gl','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(64,'jit.gl.mesh','jit.gl.mesh オブジェクト','jitter/gl','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(65,'jit.gl.render','jit.gl.render オブジェクト','jitter/gl','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(66,'jit.gl.shader','jit.gl.shader オブジェクト','jitter/gl','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(67,'jit.gl.sketch','jit.gl.sketch オブジェクト','jitter/gl','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(68,'jit.gl.text2d','jit.gl.text2d オブジェクト','jitter/gl','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(69,'jit.gl.text3d','jit.gl.text3d オブジェクト','jitter/gl','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(70,'jit.gl.texture','jit.gl.texture オブジェクト','jitter/gl','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(71,'jit.gl.videoplane','jit.gl.videoplane オブジェクト','jitter/gl','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(72,'jit.grab','jit.grab オブジェクト','jitter/input','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(73,'jit.matrix','jit.matrix オブジェクト','jitter/data','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(74,'jit.movie','jit.movie オブジェクト','jitter/video','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(75,'jit.noise','jit.noise オブジェクト','jitter/gen','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(76,'jit.op','jit.op オブジェクト','jitter/math','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(77,'jit.phys.body','jit.phys.body オブジェクト','jitter/physics','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(78,'jit.phys.world','jit.phys.world オブジェクト','jitter/physics','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(79,'jit.pwindow','jit.pwindow オブジェクト','jitter/ui','Max 8.0+','[]','[]',1,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(80,'jit.qt.movie','jit.qt.movie オブジェクト','jitter/video','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(81,'jit.qt.record','jit.qt.record オブジェクト','jitter/output','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(82,'jit.record','jit.record オブジェクト','jitter/output','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(83,'jit.window','jit.window オブジェクト','jitter/ui','Max 8.0+','[]','[]',1,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(84,'join','join オブジェクト','list','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(85,'key','key オブジェクト','input','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(86,'keyup','keyup オブジェクト','input','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(87,'kslider','kslider オブジェクト','ui/midi','Max 8.0+','[]','[]',1,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(88,'line','line オブジェクト','control','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(89,'line~','line~ オブジェクト','audio/control','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(90,'live.button','live.button オブジェクト','ui','Max 8.0+','[]','[]',1,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(91,'live.dial','live.dial オブジェクト','ui','Max 8.0+','[]','[]',1,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(92,'live.gain~','live.gain~ オブジェクト','audio/ui','Max 8.0+','[]','[]',1,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(93,'live.menu','live.menu オブジェクト','ui','Max 8.0+','[]','[]',1,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(94,'live.numbox','live.numbox オブジェクト','ui/data','Max 8.0+','[]','[]',1,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(95,'live.slider','live.slider オブジェクト','ui','Max 8.0+','[]','[]',1,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(96,'live.step','live.step オブジェクト','ui/sequencer','Max 8.0+','[]','[]',1,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(97,'live.tab','live.tab オブジェクト','ui','Max 8.0+','[]','[]',1,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(98,'live.text','live.text オブジェクト','ui','Max 8.0+','[]','[]',1,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(99,'live.toggle','live.toggle オブジェクト','ui','Max 8.0+','[]','[]',1,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(100,'lop~','lop~ オブジェクト','audio/filter','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(101,'lores~','lores~ オブジェクト','audio/filter','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(102,'makenote','makenote オブジェクト','midi','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(103,'match','match オブジェクト','control','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(104,'matrixctrl','matrixctrl オブジェクト','ui','Max 8.0+','[]','[]',1,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(105,'mc.min.info~','mc.min.info~ オブジェクト','min/audio','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(106,'mc.mix~','mc.mix~ オブジェクト','msp/mc','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(107,'mc.op~','mc.op~ オブジェクト','msp/mc','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(108,'mc.pack~','mc.pack~ オブジェクト','msp/mc','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(109,'mc.selector~','mc.selector~ オブジェクト','msp/mc','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(110,'mc.unpack~','mc.unpack~ オブジェクト','msp/mc','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(111,'message','message オブジェクト','ui/messaging','Max 8.0+','[]','[]',1,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(112,'meter~','meter~ オブジェクト','audio/ui','Max 8.0+','[]','[]',1,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(113,'metro','metro オブジェクト','timing','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(114,'midiformat','midiformat オブジェクト','midi','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(115,'midiin','midiin オブジェクト','midi','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(116,'midiout','midiout オブジェクト','midi','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(117,'midiparse','midiparse オブジェクト','midi','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(118,'min.beat.pattern','min.beat.pattern オブジェクト','min/midi','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(119,'min.buffer.index~','min.buffer.index~ オブジェクト','min/audio','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(120,'min.buffer.loop~','min.buffer.loop~ オブジェクト','min/audio','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(121,'min.dict.join','min.dict.join オブジェクト','min/data','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(122,'min.edge~','min.edge~ オブジェクト','min/audio','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(123,'min.environment','min.environment オブジェクト','min/system','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(124,'min.hello-world','min.hello-world オブジェクト','min/example','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(125,'min.info~','min.info~ オブジェクト','min/audio','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(126,'min.jit.stencil','min.jit.stencil オブジェクト','min/jitter','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(127,'min.meter~','min.meter~ オブジェクト','min/audio','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(128,'min.note.make','min.note.make オブジェクト','min/midi','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(129,'min.pan~','min.pan~ オブジェクト','min/audio','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(130,'min.patcher.control','min.patcher.control オブジェクト','min/control','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(131,'min.phasor~','min.phasor~ オブジェクト','min/audio','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(132,'min.prefs','min.prefs オブジェクト','min/system','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(133,'min.project','min.project オブジェクト','min/system','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(134,'min.remote','min.remote オブジェクト','min/control','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(135,'min.sift~','min.sift~ オブジェクト','min/audio','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(136,'min.threadcheck','min.threadcheck オブジェクト','min/debug','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(137,'min.xfade~','min.xfade~ オブジェクト','min/audio','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(138,'mtof~','mtof~ オブジェクト','audio/conversion','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(139,'multislider','multislider オブジェクト','ui','Max 8.0+','[]','[]',1,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(140,'noise~','noise~ オブジェクト','audio/gen','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(141,'notein','notein オブジェクト','midi','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(142,'noteout','noteout オブジェクト','midi','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(143,'number','number オブジェクト','ui/data','Max 8.0+','[]','[]',1,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(144,'onepole~','onepole~ オブジェクト','audio/filter','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(145,'pack','pack オブジェクト','control','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(146,'pan2~','pan2~ オブジェクト','audio/spatial','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(147,'panel','panel オブジェクト','ui','Max 8.0+','[]','[]',1,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(148,'pan~','pan~ オブジェクト','audio/spatial','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(149,'pattrstorage','pattrstorage オブジェクト','attributes','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(150,'peak~','peak~ オブジェクト','audio/analysis','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(151,'pfft~','pfft~ オブジェクト','audio/fft','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(152,'pgmin','pgmin オブジェクト','midi','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(153,'pgmout','pgmout オブジェクト','midi','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(154,'phasor~','phasor~ オブジェクト','audio/gen','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(155,'pictslider','pictslider オブジェクト','ui','Max 8.0+','[]','[]',1,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(156,'pink~','pink~ オブジェクト','audio/gen','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(157,'pipe','pipe オブジェクト','timing','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(158,'play~','play~ オブジェクト','audio/playback','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(159,'poly~','poly~ オブジェクト','msp','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(160,'prepend','prepend オブジェクト','control','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(161,'preset','preset オブジェクト','ui/storage','Max 8.0+','[]','[]',1,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(162,'print','print オブジェクト','debug','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(163,'rampsmooth~','rampsmooth~ オブジェクト','audio/filter','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(164,'random','random オブジェクト','math','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(165,'record~','record~ オブジェクト','audio/recording','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(166,'rect~','rect~ オブジェクト','audio/gen','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(167,'regexp','regexp オブジェクト','text','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(168,'reson~','reson~ オブジェクト','audio/filter','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(169,'route','route オブジェクト','control','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(170,'rslider','rslider オブジェクト','ui','Max 8.0+','[]','[]',1,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(171,'sah~','sah~ オブジェクト','audio/sampling','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(172,'saw~','saw~ オブジェクト','audio/gen','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(173,'scale','scale オブジェクト','math','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(174,'scope~','scope~ オブジェクト','ui/audio','Max 8.0+','[]','[]',1,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(175,'select','select オブジェクト','control','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(176,'selector~','selector~ オブジェクト','audio/control','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(177,'sfplay~','sfplay~ オブジェクト','audio/playback','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(178,'sfrecord~','sfrecord~ オブジェクト','audio/recording','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(179,'slider','slider オブジェクト','ui','Max 8.0+','[]','[]',1,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(180,'slide~','slide~ オブジェクト','audio/filter','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(181,'snapshot~','snapshot~ オブジェクト','audio/control','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(182,'spectroscope~','spectroscope~ オブジェクト','ui/audio','Max 8.0+','[]','[]',1,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(183,'spike~','spike~ オブジェクト','audio/analysis','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(184,'spray','spray オブジェクト','control','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(185,'sprintf','sprintf オブジェクト','text','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(186,'stripnote','stripnote オブジェクト','midi','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(187,'svf~','svf~ オブジェクト','audio/filter','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(188,'tanh~','tanh~ オブジェクト','audio/distortion','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(189,'teeth~','teeth~ オブジェクト','audio/filter','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(190,'textedit','textedit オブジェクト','ui/text','Max 8.0+','[]','[]',1,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(191,'timer','timer オブジェクト','timing','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(192,'toggle','toggle オブジェクト','ui','Max 8.0+','[]','[]',1,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(193,'tosymbol','tosymbol オブジェクト','conversion','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(194,'touchin','touchin オブジェクト','midi','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(195,'touchout','touchout オブジェクト','midi','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(196,'trapezoid~','trapezoid~ オブジェクト','audio/gen','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(197,'trigger','trigger オブジェクト','control','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(198,'umenu','umenu オブジェクト','ui','Max 8.0+','[]','[]',1,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(199,'unpack','unpack オブジェクト','control','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(200,'uzi','uzi オブジェクト','control','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(201,'value','value オブジェクト','data','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(202,'waveform~','waveform~ オブジェクト','ui/audio','Max 8.0+','[]','[]',1,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(203,'zerox~','zerox~ オブジェクト','audio/analysis','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO max_objects VALUES(204,'zl','zl オブジェクト','list','Max 8.0+','[]','[]',0,0,NULL,'2025-04-06 16:16:39','2025-04-06 16:16:39');
CREATE TABLE min_devkit_api (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    function_name TEXT NOT NULL UNIQUE, -- 関数名
    signature TEXT,                     -- 関数シグネチャ
    return_type TEXT,                   -- 戻り値の型
    description TEXT,                   -- 関数の説明
    parameters TEXT,                    -- パラメータ情報（JSON形式）
    example_usage TEXT,                 -- 使用例
    version_compatibility TEXT,         -- バージョン互換性情報
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
INSERT INTO min_devkit_api VALUES(1,'defer_low','void* defer_low(void* obj',' method fn',' void* data',' long ac',' t_atom* av)','void* - 低優先度でメソッド呼び出しを遅延。バックグラウンド処理','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(2,'clock_delay','void clock_delay(void* c',' double delay)','void','クロックを指定時間後に起動。タイミング制御','c:クロックオブジェクト, delay:遅延時間(ms)','clock_delay(x->clock -  1000.0)','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(3,'clock_unset','void clock_unset(void* c)','void','クロックの起動をキャンセル。タイマーキャンセル','c:クロックオブジェクト','clock_unset(x->clock)','4.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(4,'clock_new','void* clock_new(void* obj',' method fn)','void*','新しいクロックオブジェクトを作成。タイマー生成','obj:オブジェクト, fn:コールバック関数','x->clock = clock_new(x -  (method)tick)','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(5,'clock_free','void clock_free(void* c)','void','クロックオブジェクトを解放。リソース解放','c:クロックオブジェクト','clock_free(x->clock)','4.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(6,'qelem_new','void* qelem_new(void* obj',' method fn)','void*','キューエレメントを作成。イベントキュー','obj:オブジェクト, fn:コールバック関数','x->qelem = qelem_new(x -  (method)my_qfn)','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(7,'qelem_set','void qelem_set(void* q)','void','キューエレメントをスケジュール。キュー登録','q:キューエレメント','qelem_set(x->qelem)','4.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(8,'qelem_unset','void qelem_unset(void* q)','void','キューエレメントをキャンセル。登録解除','q:キューエレメント','qelem_unset(x->qelem)','4.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(9,'qelem_free','void qelem_free(void* q)','void','キューエレメントを解放。リソース解放','q:キューエレメント','qelem_free(x->qelem)','4.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(10,'jit_object_method','void* jit_object_method(void* x',' t_symbol* s',' ...)','void*','Jitterオブジェクトのメソッドを呼び出す。Jitter操作','x:Jitterオブジェクト, s:メソッド名, ...:引数 - jit_object_method(matrix','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(11,'jit_object_new','void* jit_object_new(t_symbol* classname)','void*','新しいJitterオブジェクトを作成。Jitterオブジェクト生成','classname:クラス名','matrix = jit_object_new(_jit_sym_jit_matrix',' type -  dim_count','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(12,'jit_object_free','void jit_object_free(void* x)','void','Jitterオブジェクトを解放。リソース解放','x:Jitterオブジェクト','jit_object_free(matrix)','5.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(13,'jit_matrix_info_default','void jit_matrix_info_default(t_jit_matrix_info* info)','void','マトリックス情報をデフォルト値で初期化。情報構造体設定','info:マトリックス情報構造体','jit_matrix_info_default(&info)','5.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(14,'critical_enter','int critical_enter(t_critical* c)','int','クリティカルセクションに入る。排他制御開始','c:クリティカルセクションオブジェクト','critical_enter(x->critical)','4.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(15,'critical_exit','void critical_exit(t_critical* c)','void','クリティカルセクションから出る。排他制御終了','c:クリティカルセクションオブジェクト','critical_exit(x->critical)','4.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(16,'critical_new','t_critical* critical_new()','t_critical*','新しいクリティカルセクションを作成。同期オブジェクト生成','なし','x->critical = critical_new()','4.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(17,'critical_free','void critical_free(t_critical* c)','void','クリティカルセクションを解放。リソース解放','c:クリティカルセクションオブジェクト','critical_free(x->critical)','4.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(18,'sysmem_newptr','void* sysmem_newptr(long size)','void*','新しいメモリブロックを確保。動的メモリ割り当て','size:バイト数','x->buffer = (float*)sysmem_newptr(size * sizeof(float))','4.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(19,'sysmem_freeptr','void sysmem_freeptr(void* ptr)','void','メモリブロックを解放。メモリ解放','ptr:メモリポインタ','sysmem_freeptr(x->buffer)','4.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(20,'sysmem_resizeptr','void* sysmem_resizeptr(void* ptr',' long newsize)','void*','メモリブロックのサイズを変更。メモリ再割り当て','ptr:メモリポインタ, newsize:新しいサイズ','x->buffer = (float*)sysmem_resizeptr(x->buffer -  newsize * sizeof(float))','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(21,'proxy_getinlet','short proxy_getinlet(t_object* x)','short','現在のインレット番号を取得。入力ポート識別','x:オブジェクト','inlet_num = proxy_getinlet((t_object*)x)','4.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(22,'proxy_new','void* proxy_new(t_object* x',' long id',' long* inlet)','void*','プロキシ新規作成。追加インレット管理','x:オブジェクト, id:ID, inlet:インレット値保存先 - x->proxy = proxy_new((t_object*)x','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(23,'proxy_delete','void proxy_delete(void* p)','void','プロキシ削除。リソース解放','p:プロキシオブジェクト','proxy_delete(x->proxy)','4.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(24,'class_addmethod','void class_addmethod(t_class* c',' method m',' const char* name',' ...)','void','クラスにメソッドを追加。メソッド登録 - c:クラス, m:メソッド関数, name:メソッド名, ...:引数型','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(25,'class_addattr','t_max_err class_addattr(t_class* c',' t_object* attr)','t_max_err','クラスに属性を追加。属性登録','c:クラス, attr:属性オブジェクト','class_addattr(c -  attr)','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(26,'class_register','t_max_err class_register(t_symbol* name',' t_class** c)','t_max_err','クラスを登録。クラスの有効化','name:名前空間, c:クラスポインタの参照','class_register(CLASS_BOX -  &c)','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(27,'gensym','t_symbol* gensym(const char* s)','t_symbol*','シンボルを取得または作成。シンボルテーブル管理','s:シンボル名','t_symbol* ps_buffer = gensym(""buffer"")','4.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(28,'atom_setobj','void atom_setobj(t_atom* a',' void* o)','void','アトム値をオブジェクトポインタに設定。アトムデータ初期化','a:アトム, o:オブジェクトポインタ','atom_setobj(&a[0] -  matrix)','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(29,'atom_getobj','void* atom_getobj(const t_atom* a)','void*','アトム値からオブジェクトポインタを取得。アトムデータ解析','a:アトム','void* obj = atom_getobj(argv)','4.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(30,'dsp_add64','void dsp_add64(t_object* dspchain',' t_object* obj',' t_perfroutine64 perf64',' long flags',' void* userparam)','void - DSP処理チェーンにオブジェクトを追加。オーディオ処理登録','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(31,'jbox_new','t_object* jbox_new(t_jbox_initclass* c',' long flags',' ...)','t_object*','新しいUIボックスを作成。視覚的オブジェクト','c:初期化構造体, flags:フラグ, ...:引数 - obj = jbox_new(&jbox_init','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(32,'jbox_ready','void jbox_ready(t_jbox* b)','void','ボックスの準備完了を通知。UI初期化完了','b:ボックスオブジェクト','jbox_ready((t_jbox*)x)','5.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(33,'jbox_redraw','void jbox_redraw(t_jbox* b)','void','ボックスの再描画を要求。UI更新','b:ボックスオブジェクト','jbox_redraw((t_jbox*)x)','5.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(34,'jgraphics_rectangle','void jgraphics_rectangle(t_jgraphics* g',' double x',' double y',' double width',' double height)','void - 矩形を描画。図形描画','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(35,'jgraphics_rectangle_fill','void jgraphics_rectangle_fill(t_jgraphics* g',' double x',' double y',' double width',' double height',' double oval) - void','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(36,'jgraphics_line_draw','void jgraphics_line_draw(t_jgraphics* g',' double x1',' double y1',' double x2',' double y2)','void - 線を描画。図形描画','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(37,'jgraphics_set_source_rgb','void jgraphics_set_source_rgb(t_jgraphics* g',' double red',' double green',' double blue)','void','描画色をRGBで設定。色指定 - g:グラフィックスコンテキスト, red:赤(0-1), green:緑(0-1), blue:青(0-1)','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(38,'jgraphics_set_source_rgba','void jgraphics_set_source_rgba(t_jgraphics* g',' double red',' double green',' double blue',' double alpha)','void - 描画色をRGBAで設定。透明度付き色指定','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(39,'jgraphics_fill','void jgraphics_fill(t_jgraphics* g)','void','パスを塗りつぶす。図形描画','g:グラフィックスコンテキスト','jgraphics_fill(g)','5.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(40,'jgraphics_stroke','void jgraphics_stroke(t_jgraphics* g)','void','パスの輪郭を描画。図形描画','g:グラフィックスコンテキスト','jgraphics_stroke(g)','5.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(41,'jgraphics_select_font_face','void jgraphics_select_font_face(t_jgraphics* g',' const char* family',' t_jgraphics_font_slant slant',' t_jgraphics_font_weight weight)','void','フォントを選択。テキスト描画設定 - g:グラフィックスコンテキスト, family:フォント名, slant:斜体, weight:太さ','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(42,'jgraphics_set_font_size','void jgraphics_set_font_size(t_jgraphics* g',' double size)','void','フォントサイズを設定。テキスト描画設定','g:グラフィックスコンテキスト, size:サイズ','jgraphics_set_font_size(g -  12.0)','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(43,'jgraphics_show_text','void jgraphics_show_text(t_jgraphics* g',' const char* utf8)','void','テキストを描画。テキスト表示','g:グラフィックスコンテキスト, utf8:テキスト','jgraphics_show_text(g -  ""Hello','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(44,'sys_getsr','float sys_getsr()','float','現在のサンプリングレートを取得。システム情報','なし','float sr = sys_getsr()','4.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(45,'sys_getblksize','int sys_getblksize()','int','現在のブロックサイズを取得。システム情報','なし','int vs = sys_getblksize()','4.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(46,'sys_getmaxblksize','int sys_getmaxblksize()','int','最大ブロックサイズを取得。システム情報','なし','int max_vs = sys_getmaxblksize()','5.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(47,'MIN_DSP_SETUP','MIN_DSP_SETUP {code}','void','Min API: DSPセットアップ定義。オーディオ処理初期化','code:セットアップコード','MIN_DSP_SETUP { /* 初期化処理 */ }','7.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(48,'range::operator(min/max)','T operator()(T value)','T','Min API: 範囲制限演算子。値のクリッピング','value:入力値','float limited_value = my_range(input_value)','7.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(49,'object<T>::begin()','void begin()','void','Min API: オブジェクト処理開始。初期化ポイント','なし','template<> void begin() { /* 初期化処理 */ }','7.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(50,'object<T>::begin_dsp()','void begin_dsp()','void','Min API: DSP処理開始。DSP初期化ポイント','なし','template<> void begin_dsp() { /* DSP初期化処理 */ }','7.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(51,'object<T>::bang()','void bang()','void','Min API: バングメッセージ処理。デフォルトバング処理','なし','template<> void bang() { /* バング処理 */ }','7.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(52,'inlet<>::send()','send(args...)','void','Min API: インレットへの送信。インレットへのデータ送信','args:送信データ','input.send(value)','7.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(53,'outlet<>::send()','send(args...)','void','Min API: アウトレットへの送信。アウトレットへのデータ送信','args:送信データ','output.send(value)','7.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(54,'operator->()','T* operator->()','T*','Min API: 属性アクセス演算子。属性への直接アクセス','なし','auto value = attribute->;','7.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(55,'buffer_reference::lock()','buffer_lock<true> lock()','buffer_lock<true>','Min API: バッファロック。安全なバッファアクセス','なし','auto b = buffer.lock()','7.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(56,'buffer_lock<>::samples','float* samples','float*','Min API: バッファサンプルアクセス。サンプルデータへのポインタ','なし','auto samples = buffer_lock.samples','7.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(57,'buffer_lock<>::length','size_t length','size_t','Min API: バッファ長さ。サンプル数','なし','auto length = buffer_lock.length','7.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(58,'buffer_lock<>::channel_count','size_t channel_count','size_t','Min API: バッファチャンネル数。チャンネル数','なし','auto channels = buffer_lock.channel_count','7.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(59,'MIN_CLAMP','T MIN_CLAMP(T value',' T lo',' T hi)','T','Min API: 値のクランプ。範囲制限','value:入力値, lo:最小値, hi:最大値 - float clamped = MIN_CLAMP(value','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(60,'MIN_WRAP','T MIN_WRAP(T value',' T lo',' T hi)','T','Min API: 値のラップ。循環範囲制限','value:入力値, lo:最小値, hi:最大値 - float wrapped = MIN_WRAP(value','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(61,'MIN_FOLD','T MIN_FOLD(T value',' T lo',' T hi)','T','Min API: 値の折り返し。鏡面範囲制限','value:入力値, lo:最小値, hi:最大値 - float folded = MIN_FOLD(value','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(62,'MIN_FILTER_SIGNAL','sample operator()(sample x)','sample','Min API: 信号フィルタリング。サンプル処理関数','x:入力サンプル','sample result = filter(input)','7.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(63,'dictobj::for_each','void for_each(const dict& d',' function f)','void','Min API: 辞書反復処理。全ての辞書要素に関数適用','d:辞書, f:適用関数','dictobj::for_each(my_dict -  [](const symbol& key','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(64,'path::exists','bool exists()','bool','Min API: パス存在確認。ファイルパスの存在検証','なし','if (p.exists()) { /* 処理 */ }','7.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(65,'path::is_folder','bool is_folder()','bool','Min API: フォルダ判定。パスがフォルダかどうか','なし','if (p.is_folder()) { /* 処理 */ }','7.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(66,'path::is_file','bool is_file()','bool','Min API: ファイル判定。パスがファイルかどうか','なし','if (p.is_file()) { /* 処理 */ }','7.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(67,'path::filetype','symbol filetype()','symbol','Min API: ファイルタイプ取得。拡張子を取得','なし','auto type = p.filetype()','7.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(68,'queue::push','void push(function f)','void','Min API: キューにタスク追加。非同期処理登録','f:実行関数','q.push([&] { /* 処理 */ })','7.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(69,'timer::delay','void delay(double milliseconds)','void','Min API: タイマー遅延設定。時間経過後の処理','milliseconds:ミリ秒単位の遅延','metro.delay(1000.0)','7.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(70,'timer::stop','void stop()','void','Min API: タイマー停止。タイマーキャンセル','なし','metro.stop()','7.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(71,'preferences::set','void set(const symbol& key',' const atoms& value)','void','Min API: 環境設定値設定。設定の保存','key:キー, value:値','preferences::set(""my-preference"" -  {1.0','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(72,'preferences::get','atoms get(const symbol& key)','atoms','Min API: 環境設定値取得。設定の読み込み','key:キー','auto prefs = preferences::get(""my-preference"")','7.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(73,'dict::append','void append(const symbol& key',' const atom& value)','void','Min API: 辞書に値追加。キーと値のペア追加','key:キー, value:値','my_dict.append(""key"" -  1.0)','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(74,'dict::contains','bool contains(const symbol& key)','bool','Min API: 辞書キー存在確認。キーの存在検証','key:キー','if (my_dict.contains(""key"")) { /* 処理 */ }','7.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(75,'MIN_LINEAR_INTERP','sample MIN_LINEAR_INTERP(sample frac',' sample a',' sample b)','sample','Min API: 線形補間。2点間の補間','frac:比率, a:開始値, b:終了値 - sample result = MIN_LINEAR_INTERP(0.5','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(76,'MIN_CUBIC_INTERP','sample MIN_CUBIC_INTERP(sample frac',' sample a',' sample b',' sample c',' sample d)','sample - Min API: 3次補間。4点間の滑らかな補間','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(77,'MIN_SPLINE_INTERP','sample MIN_SPLINE_INTERP(sample frac',' sample a',' sample b',' sample c',' sample d)','sample - Min API: スプライン補間。4点間の滑らかな補間','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(78,'MIN_HERMITE_INTERP','sample MIN_HERMITE_INTERP(sample frac',' sample a',' sample b',' sample c',' sample d)','sample - Min API: エルミート補間。4点間の補間','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(79,'MIN_COSINE_INTERP','sample MIN_COSINE_INTERP(sample frac',' sample a',' sample b)','sample','Min API: コサイン補間。2点間の補間','frac:比率, a:開始値, b:終了値 - sample result = MIN_COSINE_INTERP(0.5','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(80,'MIN_STRIDE_LOOP','void MIN_STRIDE_LOOP(inlets',' outlets',' vector_size',' code)','void','Min API: ストライドループ。効率的な配列処理 - inlets:入力配列, outlets:出力配列, vector_size:処理サイズ, code:処理内容','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(81,'MIN_ALLOW_OVERFLOW','int MIN_ALLOW_OVERFLOW','int','Min API: オーバーフロー許可。境界チェック無効化','なし','#define MIN_ALLOW_OVERFLOW 1','7.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(82,'MIN_ENABLE_VECTOR_OPERATORS','int MIN_ENABLE_VECTOR_OPERATORS','int','Min API: ベクトル演算子有効化。SIMD最適化','なし','#define MIN_ENABLE_VECTOR_OPERATORS 1','7.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(83,'time_value::operator double()','operator double()','double','Min API: 時間値の数値変換。時間値から倍精度浮動小数点への変換','なし','double ms = time_value;','7.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(84,'MIN_UNITS','MIN_UNITS { units... }','void','Min API: 単位定義。値の単位設定','units:単位名リスト','MIN_UNITS { ""Hz""',' ""ms"" -  ""%" };','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(85,'MIN_ALLOW_WIRE_DEFAULTS','int MIN_ALLOW_WIRE_DEFAULTS','int','Min API: ワイヤーデフォルト許可。接続値の既定値','なし','#define MIN_ALLOW_WIRE_DEFAULTS 1','7.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(86,'MIN_PROCESS','void process(audio_bundle input',' audio_bundle output)','void','Min API: オーディオ処理。サンプルブロック処理','input:入力バンドル, output:出力バンドル','void process(audio_bundle input -  audio_bundle output) { /* 処理 */ }','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(87,'MIN_PROCESS_WIRE','void operator()(audio_bundle input',' audio_bundle output)','void','Min API: ワイヤー処理。信号接続処理','input:入力バンドル, output:出力バンドル','void operator()(audio_bundle input -  audio_bundle output) { /* 処理 */ }','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(88,'timer::timer','timer(object_base* owner',' function f)','timer','Min API: タイマfunction_name','signature','return_type - description','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(89,'inlet_new','t_atom_long inlet_new(t_object* x',' char* type)','t_atom_long','新しいインレットを作成。オブジェクトに入力ポートを追加する','x:オブジェクトポインタ, type:シグナルタイプ("signal","float" など)','inlet_new(this -  ""signal"")','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(90,'outlet_new','void* outlet_new(t_object* x',' char* type)','void*','新しいアウトレットを作成。オブジェクトに出力ポートを追加する','x:オブジェクトポインタ, type:出力タイプ("bang","list" など)','outlet_new(this -  ""bang"")','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(91,'class_new','t_class* class_new(const char* name',' method new_method',' method free_method',' long size',' method args',' char flags) - t_class*','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(92,'attribute_new','t_max_err class_addattr(t_class* c',' t_object* attr)','t_max_err','クラスに属性を追加。パラメータアクセスを提供','c:クラスポインタ, attr:属性オブジェクト','class_addattr(c -  attr_offset_new(""value""','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(93,'object_alloc','void* object_alloc(t_class* c)','void*','オブジェクトインスタンスのメモリ確保。クラス定義に基づいてインスタンス作成','c:クラスポインタ','this = (t_myobj*)object_alloc(myobj_class)','1.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(94,'object_free','void object_free(void* x)','void','オブジェクトインスタンスのメモリ解放。使用終了したオブジェクトの破棄','x:オブジェクトポインタ','object_free(myobj)','1.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(95,'attr_offset_new','t_object* attr_offset_new(const char* name',' const t_symbol* type',' long flags',' method getter',' method setter',' long offset) - t_object*','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(96,'calcoffset','long calcoffset(t_class_name',' t_member_name)','long','構造体メンバのバイトオフセットを計算。属性アクセスに使用','t_class_name:構造体型, t_member_name:メンバ名','calcoffset(t_myobj -  f_value)','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(97,'object_method','t_max_err object_method(void* x',' t_symbol* s',' ...)','t_max_err','オブジェクトのメソッドを呼び出す。動的メソッド呼び出し','x:オブジェクトポインタ, s:メソッド名, ...:引数 - object_method(buffer','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(98,'outlet_bang','void outlet_bang(void* o)','void','バングメッセージを出力。トリガー信号の送信','o:アウトレットポインタ','outlet_bang(m_outlet)','1.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(99,'outlet_int','void outlet_int(void* o',' t_atom_long n)','void','整数値を出力。整数データの送信','o:アウトレットポインタ, n:整数値','outlet_int(m_outlet -  42)','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(100,'outlet_float','void outlet_float(void* o',' double f)','void','浮動小数点値を出力。浮動小数点データの送信','o:アウトレットポインタ, f:浮動小数点値','outlet_float(m_outlet -  3.14159)','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(101,'outlet_list','void outlet_list(void* o',' t_symbol* s',' short ac',' t_atom* av)','void','リストを出力。複数値の送信 - o:アウトレットポインタ, s:リスト識別子, ac:要素数, av:要素配列','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(102,'outlet_anything','void outlet_anything(void* o',' t_symbol* s',' short ac',' t_atom* av)','void','任意のメッセージを出力。カスタムメッセージ形式の送信 - o:アウトレットポインタ, s:メッセージ名, ac:引数数, av:引数配列','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(103,'atom_setfloat','void atom_setfloat(t_atom* a',' double f)','void','アトム値を浮動小数点数に設定。アトムデータの初期化','a:アトムポインタ, f:浮動小数点値','atom_setfloat(&a[0] -  3.14)','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(104,'atom_setlong','void atom_setlong(t_atom* a',' t_atom_long b)','void','アトム値を整数に設定。アトムデータの初期化','a:アトムポインタ, b:整数値','atom_setlong(&a[0] -  42)','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(105,'atom_setsym','void atom_setsym(t_atom* a',' t_symbol* s)','void','アトム値をシンボルに設定。アトムデータの初期化','a:アトムポインタ, s:シンボルポインタ','atom_setsym(&a[0] -  gensym(""test""))','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(106,'atom_getfloat','double atom_getfloat(const t_atom* a)','double','アトム値から浮動小数点数を取得。アトムデータの解析','a:アトムポインタ','float64 value = atom_getfloat(argv)','1.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(107,'atom_getlong','t_atom_long atom_getlong(const t_atom* a)','t_atom_long','アトム値から整数を取得。アトムデータの解析','a:アトムポインタ','long value = atom_getlong(argv)','1.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(108,'atom_getsym','t_symbol* atom_getsym(const t_atom* a)','t_symbol*','アトム値からシンボルを取得。アトムデータの解析','a:アトムポインタ','t_symbol* s = atom_getsym(argv)','1.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(109,'buffer_ref_new','t_object* buffer_ref_new(t_object* x',' t_symbol* name)','t_object*','バッファ参照オブジェクトを作成。バッファアクセス用オブジェクト','x:オブジェクトポインタ, name:バッファ名','buffer_ref_new(this -  ps_buffer)','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(110,'buffer_ref_set','t_max_err buffer_ref_set(t_object* x',' t_symbol* name)','t_max_err','バッファ参照オブジェクトのターゲットを設定。参照先の変更','x:バッファ参照オブジェクト, name:バッファ名','buffer_ref_set(x->buffer_ref -  ps_buffer)','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(111,'buffer_ref_getobject','t_object* buffer_ref_getobject(t_object* x)','t_object*','バッファオブジェクトを取得。バッファデータへのアクセス準備','x:バッファ参照オブジェクト','t_buffer_obj* buffer_obj = buffer_ref_getobject(x->buffer_ref)','6.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(112,'buffer_locksamples','float* buffer_locksamples(t_object* buffer_obj)','float*','バッファサンプルデータをロック。安全なデータアクセス','buffer_obj:バッファオブジェクト','float* samples = buffer_locksamples(buffer_obj)','6.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(113,'buffer_unlocksamples','void buffer_unlocksamples(t_object* buffer_obj)','void','バッファサンプルデータのロックを解除。アクセス終了','buffer_obj:バッファオブジェクト','buffer_unlocksamples(buffer_obj)','6.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(114,'buffer_getframecount','t_atom_long buffer_getframecount(t_object* buffer_obj)','t_atom_long','バッファのフレーム数を取得。サイズ情報','buffer_obj:バッファオブジェクト','t_atom_long frames = buffer_getframecount(buffer_obj)','6.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(115,'buffer_getchannelcount','t_atom_long buffer_getchannelcount(t_object* buffer_obj)','t_atom_long','バッファのチャンネル数を取得。チャンネル情報','buffer_obj:バッファオブジェクト','t_atom_long channels = buffer_getchannelcount(buffer_obj)','6.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(116,'inlet<>','inlet<> input(object_base* owner',' std::string description)','inlet<>','Min API: オブジェクトのインレットを定義。入力ポート宣言','owner:オブジェクト, description:説明','inlet<> input { this -  ""Input inlet"" }','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(117,'outlet<>','outlet<> output(object_base* owner',' std::string description)','outlet<>','Min API: オブジェクトのアウトレットを定義。出力ポート宣言','owner:オブジェクト, description:説明','outlet<> output { this -  ""Output data"" }','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(118,'attribute<T>','attribute<T> attr(object_base* owner',' std::string name',' T default_value)','attribute<T>','Min API: オブジェクトの属性を定義。パラメータ宣言','owner:オブジェクト, name:属性名, default_value:デフォルト値 - attribute<number> gain { this','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(119,'message<>','message<> msg(object_base* owner',' std::string name',' std::string description',' function)','message<>','Min API: メッセージハンドラーの定義。入力メッセージ処理 - owner:オブジェクト, name:メッセージ名, description:説明, function:コールバック関数','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(120,'MIN_FUNCTION','atoms MIN_FUNCTION(const atoms& args)','atoms','Min API: 関数定義マクロ。メッセージハンドラー内部の実装','args:関数に渡された引数','MIN_FUNCTION { return {}; }','7.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(121,'buffer_reference','buffer_reference buffer(object_base* owner)','buffer_reference','Min API: バッファ参照オブジェクト。バッファアクセス','owner:オブジェクト','buffer_reference buffer { this }','7.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(122,'dict::make','dict dict::make()','dict','Min API: 新しい辞書を作成。辞書オブジェクト生成','なし','auto d = dict::make()','7.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(123,'symbol','symbol sym(std::string name)','symbol','Min API: シンボルオブジェクト。名前付き識別子','name:シンボル名','symbol s = ""test""','7.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(124,'atoms','std::vector<atom> atoms','std::vector<atom>','Min API: アトムの配列。引数やデータの集合','なし','atoms result = {1.0',' ""test"" -  42}','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(125,'MIN_DESCRIPTION','MIN_DESCRIPTION {text}','void','Min API: オブジェクトの説明を定義。ヘルプテキスト設定','text:説明テキスト','MIN_DESCRIPTION {""オーディオ信号を処理します""};','7.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(126,'MIN_TAGS','MIN_TAGS {tags...}','void','Min API: オブジェクトのタグを定義。カテゴリタグ設定','tags:カテゴリタグ','MIN_TAGS {""audio""',' ""filter"" -  ""effect""};','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(127,'MIN_AUTHOR','MIN_AUTHOR {author}','void','Min API: オブジェクトの作者を定義。著者情報設定','author:作者名','MIN_AUTHOR {""Jane Doe""};','7.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(128,'MIN_RELATED','MIN_RELATED {related...}','void','Min API: 関連オブジェクトを定義。関連項目リスト','related:関連オブジェクトリスト','MIN_RELATED {""filter~""',' ""biquad~"" -  ""lores~""};','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(129,'MIN_ARGUMENT_FUNCTION','MIN_ARGUMENT_FUNCTION {code}','void','Min API: 引数処理関数。引数解析コード','code:引数処理コード','MIN_ARGUMENT_FUNCTION { this->value = arg; }','7.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(130,'number','double number','double','Min API: 数値型。浮動小数点値','なし','attribute<number> frequency { this',' ""frequency"" -  440.0 };','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(131,'sample','double sample','double','Min API: サンプル型。オーディオサンプル値','なし','sample s = 0.0;','7.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(132,'timer','timer timer_obj(object_base* owner',' method func)','timer','Min API: タイマーオブジェクト。定期的なイベント','owner:オブジェクト, func:コールバック関数','timer metro { this -  MIN_FUNCTION { /* 処理 */ return {}; } }','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(133,'path','path path_obj(object_base* owner)','path','Min API: パスオブジェクト。ファイルパス管理','owner:オブジェクト','path p { this };','7.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(134,'queue','queue queue_obj(object_base* owner)','queue','Min API: キューオブジェクト。非同期メッセージキュー','owner:オブジェクト','queue q { this };','7.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(135,'time_value','time_value time_val(double value',' std::string units)','time_value','Min API: 時間値オブジェクト。単位付き時間値','value:値, units:単位','time_value t { 100.0 -  ""ms"" };','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(136,'object_base','class object_base','class','Min API: 基本オブジェクトクラス。オブジェクト基底','なし','class myobject : public object<myobject> { /* ... */ };','7.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(137,'sample_operator','sample operator()(sample input)','sample','Min API: サンプル演算子。サンプル単位の処理','input:入力サンプル','sample operator()(sample x) { return x * m_gain; }','7.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(138,'ui_operator','ui<> ui_handler(object_base* owner)','ui<>','Min API: UI操作ハンドラ。ユーザーインターフェース処理','owner:オブジェクト','ui<> ui_handler { this',' MIN_FUNCTION { /* UI処理 */ return true; } }; - 7.0','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(139,'threadsafe','enum threadsafe { no',' yes }','enum','Min API: スレッドセーフフラグ。属性のスレッド保護指定','なし','attribute<float -  threadsafe::yes> value { this','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(140,'limit','enum limit { none',' clamp',' fold',' wrap }','enum','Min API: 値制限フラグ。範囲外値の処理方法 - なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(141,'range','range r(T low',' T high)','range','Min API: 値の範囲指定。最小値と最大値の設定','low:最小値, high:最大値','range { 0.0 -  1.0 }','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(142,'title','title t(std::string text)','title','Min API: 表示タイトル指定。UI表示名の設定','text:表示名','title { ""Gain Level"" }','7.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(143,'description','description d(std::string text)','description','Min API: 説明テキスト。詳細説明の設定','text:説明文','description { ""Control the gain level from 0.0 to 1.0"" }','7.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(144,'priority','priority p(int value)','priority','Min API: 優先度設定。UI表示順の指定','value:優先度','priority { 1 }','7.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(145,'update','update u(bool value)','update','Min API: 更新フラグ。値変更時の通知設定','value:更新フラグ','update { true }','7.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(146,'enum_map','enum_map map','enum_map','Min API: 列挙型マッピング。名前と値の対応付け','なし','enum_map filter_types = { ""lowpass""',' ""highpass"" -  ""bandpass""','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(147,'c74::min','namespace c74::min','namespace','Min API: 名前空間。Min-API全体の名前空間','なし','using namespace c74::min;','7.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(148,'min::object','template <class T> class object : public object_base','class','Min API: オブジェクトテンプレート。CRTPベースクラス','T:派生クラス型','class myobject : public object<myobject> { /* ... */ };','7.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(149,'send','void send(std::string address',' const atoms& args)','void','Min API: メッセージ送信。指定アドレスにメッセージ送信','address:宛先アドレス, args:引数','send(""source/value"" -  {1.0','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(150,'receive','receive recv(object_base* owner',' std::string address)','receive','Min API: メッセージ受信。指定アドレスからメッセージ受信','owner:オブジェクト, address:受信アドレス','receive source { this -  ""source"" };','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(151,'monitor','monitor mon(object_base* owner',' std::string source)','monitor','Min API: 値監視。他オブジェクトの値変更監視','owner:オブジェクト, source:監視対象','monitor mon { this -  ""some_object param"" };','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(152,'filewatcher','filewatcher fw(object_base* owner)','filewatcher','Min API: ファイル監視。ファイル変更の検出','owner:オブジェクト','filewatcher watch { this };','7.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(153,'atoms_getter','atoms get()','atoms','Min API: アトム取得メソッド。属性値の取得','なし','atoms values = my_attribute.get();','7.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(154,'atoms_setter','void set(const atoms& args)','void','Min API: アトム設定メソッド。属性値の設定','args:設定値','my_attribute.set({1.0',' ""text""}); - 7.0','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(155,'atom','class atom','class','Min API: アトム値クラス。多様な型を格納可能','なし','atom a = 5.0;','7.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(156,'sample_vector','using sample_vector = std::vector<sample>','alias','Min API: サンプルベクター。サンプル値の配列','なし','sample_vector buffer(512);','7.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(157,'ext_job','ext_job job(object_base* owner',' method m',' std::vector<void*> args)','ext_job','Min API: 外部ジョブ。バックグラウンド処理','owner:オブジェクト, m:メソッド, args:引数 - ext_job job { this','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(158,'dict','dict dict_obj(atoms args)','dict','Min API: 辞書オブジェクト。キーと値のマッピング','args:初期値','dict params { ""key1""',' 1.0 -  ""key2""','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(159,'dict::operator[]','const atom& operator[](symbol key) const','atom','Min API: 辞書アクセス演算子。キーによる値取得','key:キー','auto value = my_dict[""parameter""];','7.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(160,'clock','clock clk(object_base* owner)','clock','Min API: クロックオブジェクト。タイミング制御','owner:オブジェクト','clock metro { this };','7.0 - 現行','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(161,'object_attr_getfloat','t_max_err object_attr_getfloat(void* x',' t_symbol* s',' double* d)','t_max_err','オブジェクトから浮動小数点属性値を取得。属性値アクセス','x:オブジェクト, s:属性名, d:値格納先 - object_attr_getfloat(obj','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(162,'object_attr_setfloat','t_max_err object_attr_setfloat(void* x',' t_symbol* s',' double d)','t_max_err','オブジェクトの浮動小数点属性値を設定。属性値変更','x:オブジェクト, s:属性名, d:設定値 - object_attr_setfloat(obj','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(163,'object_attr_getlong','t_max_err object_attr_getlong(void* x',' t_symbol* s',' long* v)','t_max_err','オブジェクトから整数属性値を取得。属性値アクセス','x:オブジェクト, s:属性名, v:値格納先 - object_attr_getlong(obj','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(164,'object_attr_setlong','t_max_err object_attr_setlong(void* x',' t_symbol* s',' long v)','t_max_err','オブジェクトの整数属性値を設定。属性値変更','x:オブジェクト, s:属性名, v:設定値 - object_attr_setlong(obj','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(165,'object_attr_getsym','t_max_err object_attr_getsym(void* x',' t_symbol* s',' t_symbol** sym)','t_max_err','オブジェクトからシンボル属性値を取得。属性値アクセス','x:オブジェクト, s:属性名, sym:値格納先 - object_attr_getsym(obj','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(166,'object_attr_setsym','t_max_err object_attr_setsym(void* x',' t_symbol* s',' t_symbol* sym)','t_max_err','オブジェクトのシンボル属性値を設定。属性値変更','x:オブジェクト, s:属性名, sym:設定値 - object_attr_setsym(obj','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(167,'object_post','void object_post(void* x',' const char* fmt',' ...)','void','オブジェクトからのメッセージをMaxコンソールに表示。情報出力','x:オブジェクト, fmt:フォーマット文字列, ...:可変引数 - object_post((t_object*)x','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(168,'object_error','void object_error(void* x',' const char* fmt',' ...)','void','オブジェクトからのエラーメッセージを表示。エラー報告','x:オブジェクト, fmt:フォーマット文字列, ...:可変引数 - object_error((t_object*)x','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO min_devkit_api VALUES(169,'defer','void* defer(void* obj',' method fn',' void* data',' long ac',' t_atom* av)','void* - メソッド呼び出しをメインスレッドに遅延。スレッドセーフ処理','2025-04-06 16:16:39','2025-04-06 16:16:39');
CREATE TABLE connection_patterns (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    source_object TEXT NOT NULL,       -- 送信元オブジェクト
    source_outlet INTEGER,             -- 送信元アウトレット番号
    destination_object TEXT NOT NULL,  -- 送信先オブジェクト
    destination_inlet INTEGER,         -- 送信先インレット番号
    description TEXT,                  -- 接続の説明
    is_recommended INTEGER,            -- 推奨パターンかどうか（0=false, 1=true）
    audio_signal_flow INTEGER,         -- オーディオシグナルフローかどうか（0=false, 1=true）
    performance_impact TEXT,           -- パフォーマンスへの影響
    compatibility_issues TEXT,         -- 互換性の問題
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(source_object, source_outlet, destination_object, destination_inlet)
);
INSERT INTO connection_patterns VALUES(1,'cycle~',0,'gain~',0,'基本的なオーディオ信号パス。サイン波からゲイン調整へのルーティング',1,1,'低','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(2,'phasor~',0,'*~',0,'フェーズ信号からスケール。0-1の位相信号を振幅変調に使用',1,1,'低','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(3,'jit.matrix',0,'jit.op',0,'マトリックス処理チェーン。行列データを演算処理に送る',1,0,'中','GPUモードで注意。GPU/CPU間の転送が発生する場合あり','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(4,'metro',0,'counter',0,'タイミングシーケンス。一定間隔のバングでカウンター進行',1,0,'低','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(5,'buffer~',0,'wave~',0,'バッファ参照パターン。保存されたサンプルを波形表示',1,0,'低','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(6,'osc~',0,'*~',0,'オシレーターからスケーリング。波形生成と振幅調整の基本パターン',1,1,'低','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(7,'noise~',0,'filter~',0,'ノイズソースからフィルタリング。ノイズジェネレーターからフィルター',1,1,'低','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(8,'line~',0,'*~',0,'エンベロープコントロール。オーディオレートの変調信号として使用',1,1,'低','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(9,'adc~',0,'dac~',0,'オーディオ入出力パス。マイク入力からスピーカー出力へ直接接続',1,1,'低','オーディオループバックに注意','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(10,'jit.grab',0,'jit.qt.movie',0,'カメラキャプチャから録画。ライブビデオを録画に使用',1,0,'高','CPUやGPU負荷に注意','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(11,'jit.qt.movie',0,'jit.gl.texture',0,'ビデオからGLテクスチャ。ムービーファイルを3Dシーンに取り込み',1,0,'中','GPUメモリ使用量に注意','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(12,'live.gain~',0,'dac~',0,'ゲイン調整から出力。UIコントロール付きレベル調整からの出力',1,1,'低','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(13,'live.dial',0,'live.numbox',0,'ダイヤルから数値表示。UIコントロールと数値表示の連携',1,0,'なし','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(14,'jit.gl.gridshape',0,'jit.gl.render',0,'3Dオブジェクトからレンダラー。基本的な3Dオブジェクト表示',1,0,'中','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(15,'mc.pack~',0,'mc.*~',0,'マルチチャンネルバンドル作成と処理。複数チャンネルの一括処理',1,1,'低','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(16,'mc.unpack~',0,'poly~',0,'マルチチャンネル分解からポリフォニック処理。チャンネル分離と処理',1,1,'中','複雑な接続で混乱しやすい','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(17,'live.step',0,'noteout',0,'ステップシーケンサーからMIDI出力。パターン生成とMIDI送信',1,0,'低','MIDI機器接続が必要','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(18,'fluid.bufcompose~',0,'fluid.bufspectralshape~',0,'バッファ内容の合成から分析。機械学習用データ前処理',1,0,'高','大きなバッファで処理時間増加','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(19,'jit.gencoord',0,'jit.gl.mesh',0,'座標生成からメッシュ作成。複雑な3D形状の設計',1,0,'中','頂点数に比例して負荷増加','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(20,'dict',0,'dict.view',0,'辞書内容の表示。データ構造の視覚化',1,0,'低','大規模な辞書でパフォーマンス低下','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(21,'coll',0,'zl',0,'コレクションからリスト処理。保存データのリスト操作',1,0,'低','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(22,'pattrstorage',0,'autopattr',0,'プリセット管理からパラメータ自動接続。状態保存と復元',1,0,'低','複雑なパッチで命名競合の可能性','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(23,'bach.roll',0,'bach.quantize',0,'ロールエディタから量子化。音楽記譜データの処理',1,0,'中','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(24,'jit.matrix',0,'jit.gl.videoplane',0,'マトリックスからビデオプレーン。ビデオデータの3D空間表示',1,0,'中','テクスチャ解像度に注意','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(25,'pfft~',0,'dac~',0,'FFT処理から出力。スペクトル処理の結果を直接出力',1,1,'中','CPU使用率に注意','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(26,'patcher',0,'poly~',0,'パッチャーからポリフォニックインスタンス。サブパッチをボイスとして使用',1,0,'中','インスタンス数の制限に注意','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(27,'gen~',0,'gen~',0,'gen~オブジェクト間の接続。DSPネットワークの構築',1,1,'中','再帰的な接続は避ける','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(28,'jit.gen',0,'jit.gen',0,'jit.genオブジェクト間の接続。GPUシェーダーチェーン',1,0,'中','GPUメモリとシェーダー複雑性に注意','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(29,'multislider',0,'table',0,'マルチスライダーからテーブル。複数値の転送と格納',1,0,'低','要素数の一致が必要','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(30,'noteout',0,'midiout',0,'MIDIノートデータからMIDI出力。MIDIデータのルーティング',1,0,'低','外部MIDI機器またはIAC必要','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(31,'unpack',0,'pack',0,'データ分解と再構成。複合メッセージの処理パターン',1,0,'低','要素数とデータ型に注意','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(32,'jit.window',0,'jit.pwindow',0,'Jitter専用ウィンドウからパッチャーウィンドウ。表示方法の変更',0,0,'低','jit.pwindowは古い方式','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(33,'jit.matrix',0,'jit.qt.record',0,'マトリックスから動画録画。プロセス映像の保存',1,0,'高','ディスクI/Oに注意','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(34,'midiparse',0,'stripnote',0,'MIDI解析から重複抑制。MIDIストリームの処理',1,0,'低','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(35,'route',0,'select',0,'メッセージ振り分けから選択。フローコントロールパターン',1,0,'低','データ型の一致に注意','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(36,'jitter',0,'suckah',0,'Jitterマトリックスから古いQuickTimeオブジェクト接続',0,0,'中','suckahは非推奨','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(37,'min.buffer.loop~',0,'min.edge~',0,'バッファループから信号エッジ検出。サンプル境界検出',1,1,'低','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(38,'min.beat.pattern',0,'min.note.make',0,'ビートパターンからノート生成。リズムパターンのノート化',1,0,'低','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(39,'mc.min.info~',0,'mc.unpack~',0,'MCシグナル情報からチャンネル分離。診断と処理',1,1,'低','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(40,'min.environment',0,'dict',0,'環境変数から辞書。システム情報の構造化',1,0,'低','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(41,'min.buffer.index~',0,'snapshot~',0,'バッファインデックスから瞬時値取得。バッファポジション監視',1,1,'低','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(42,'gen~',0,'min.meter~',0,'カスタムDSPからメーター。シグナルレベル可視化',1,1,'低','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(43,'min.phasor~',0,'min.pan~',0,'位相生成器からパンニング。空間的変調',1,1,'低','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(44,'min.sift~',0,'min.threadcheck',0,'信号フィルタリングからスレッド確認。処理スレッドの検証',1,1,'低','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(45,'min.buffer.loop~',0,'min.xfade~',0,'バッファループからクロスフェード。サンプル再生とミックス',1,1,'低','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(46,'min.prefs',0,'min.project',0,'環境設定からプロジェクト情報。構成管理',1,0,'低','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(47,'jit.gen',0,'min.jit.stencil',0,'GPUシェーダーからステンシル処理。画像フィルタリング',1,0,'中','GPUメモリ転送に注意','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(48,'min.remote',0,'min.patcher.control',0,'リモート制御からパッチャー操作。UI管理',1,0,'低','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(49,'min.hello-world',0,'print',0,'メッセージのプリント。基本的なテキスト出力',1,0,'なし','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(50,'min.dict.join',0,'dict.view',0,'結合辞書の表示。複数辞書の統合と可視化',1,0,'低','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(51,'fluid.dataset~',0,'fluid.kmeans~',0,'データセットからクラスタリング。機械学習データの分類処理',1,0,'高','大規模データセットで処理時間増加','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(52,'poly~',0,'spectrumdraw~',0,'ポリフォニック処理からスペクトル表示。複数ボイスの周波数分析',1,1,'中','高いボイス数で負荷増加','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(53,'jit.gl.mesh',0,'jit.gl.shader',0,'3Dメッシュからシェーダー処理。カスタム描画効果の適用',1,0,'高','複雑なメッシュとシェーダーで負荷増加','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(54,'jit.phys.body',0,'jit.phys.world',0,'物理オブジェクトから物理シミュレーション。物理エンジン統合',1,0,'高','複雑な物理演算で負荷増加','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(55,'gain~',0,'dac~',0,'ゲインからオーディオ出力へのルーティング',1,1,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(56,'adc~',0,'gain~',0,'オーディオ入力からゲインへのルーティング',1,1,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(57,'number',0,'sig~',0,'Max数値からオーディオ信号への変換',1,0,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(58,'slider',0,'sig~',0,'スライダーコントロールからオーディオ信号への変換',1,0,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(59,'slider',0,'line~',0,'スライダーから滑らかなオーディオランプの生成',1,0,'中程度','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(60,'cycle~',0,'snapshot~',0,'オーディオ信号からMax値への変換（インスペクション用）',1,1,'中程度','連続的なサンプリングではない','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(61,'metro',0,'snapshot~',0,'snapshotのトリガー（オーディオ値をサンプリング）',1,0,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(62,'cycle~',0,'send~',0,'コードレスでオーディオ信号を送信',1,1,'中程度','名前の衝突に注意','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(63,'receive~',0,'gain~',0,'コードレスで受信したオーディオ信号の処理',1,1,'中程度','名前が対応する必要あり','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(64,'number',0,'gate~',0,'オーディオゲートの制御入力',1,0,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(65,'cycle~',0,'gate~',1,'オーディオゲートへのオーディオ信号入力',1,1,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(66,'gate~',0,'dac~',0,'オーディオゲートからオーディオ出力へのルーティング',1,1,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(67,'cycle~',0,'matrix~',0,'マトリックスルーターへのオーディオ信号入力',1,1,'中程度','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(68,'number',0,'matrix~',0,'マトリックスルーティング制御（接続設定）',1,0,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(69,'poly~',0,'dac~',0,'ポリフォニックパッチからオーディオ出力へのルーティング',1,1,'重要（インスタンス数に依存）','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(70,'number',0,'poly~',0,'ポリフォニックインスタンスへの制御メッセージ',1,0,'中程度','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(71,'slider',0,'send',0,'コードレスでメッセージを送信',1,0,'最小限','名前の衝突に注意','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(72,'receive',0,'number',0,'コードレスで受信したメッセージの表示',1,0,'最小限','名前が対応する必要あり','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(73,'snapshot~',0,'route',0,'オーディオデータのルーティング処理',0,0,'中程度','データ型の不一致の可能性','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(74,'route',0,'sig~',0,'ルーティングしたデータからオーディオ信号の生成',0,0,'中程度','値の範囲に注意','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(75,'cycle~',0,'jit.matrix',0,'オーディオ信号からJitterマトリックスへの変換',0,1,'高い','変換に特別なオブジェクトが必要','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(76,'buffer~',0,'play~',0,'バッファからのサンプル再生',1,1,'中程度','バッファサイズに依存','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(77,'play~',0,'dac~',0,'サンプル再生からオーディオ出力へのルーティング',1,1,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(78,'groove~',0,'gain~',0,'可変速度サンプル再生からのオーディオ出力',1,1,'中程度','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(79,'cycle~',0,'cycle~',1,'FMシンセシス（周波数変調）',1,1,'中程度','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(80,'filter~',0,'gain~',0,'フィルターからゲインへのルーティング',1,1,'中程度','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(81,'number',0,'filter~',1,'フィルター周波数の制御',1,0,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(82,'cycle~',0,'delay~',0,'オーディオ遅延入力',1,1,'中程度','遅延時間に依存','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(83,'delay~',0,'gain~',0,'遅延したオーディオ信号の出力',1,1,'中程度','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(84,'number',0,'delay~',1,'遅延時間の制御',1,0,'最小限','値の範囲に注意','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(85,'line~',0,'cycle~',0,'周波数のスムーズな変調',1,1,'中程度','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(86,'phasor~',0,'cycle~',0,'位相変調',1,1,'中程度','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(87,'cycle~',0,'*~',0,'振幅変調のキャリア',1,1,'中程度','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(88,'cycle~',0,'*~',1,'振幅変調のモジュレーター',1,1,'中程度','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(89,'*~',0,'dac~',0,'変調信号の出力',1,1,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(90,'notein',0,'makenote',0,'MIDI入力のノート番号',1,0,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(91,'notein',1,'makenote',1,'MIDI入力のベロシティ',1,0,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(92,'makenote',0,'noteout',0,'MIDI出力のノート番号',1,0,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(93,'makenote',1,'noteout',1,'MIDI出力のベロシティ',1,0,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(94,'notein',0,'mtof',0,'MIDI音階からHz変換',1,0,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(95,'mtof',0,'cycle~',0,'MIDI音階からオシレーター周波数制御',1,0,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(96,'cycle~',0,'svf~',0,'状態変数フィルターへの入力',1,1,'中程度','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(97,'number',0,'svf~',1,'フィルター周波数設定',1,0,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(98,'number',0,'svf~',2,'フィルター共振（Q）設定',1,0,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(99,'svf~',0,'gain~',0,'フィルターローパス出力',1,1,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(100,'svf~',1,'gain~',0,'フィルターバンドパス出力',1,1,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(101,'svf~',2,'gain~',0,'フィルターハイパス出力',1,1,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(102,'svf~',3,'gain~',0,'フィルターノッチ出力',1,1,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(103,'send~',0,'receive~',0,'コードレスオーディオ接続（仮想的な接続）',1,1,'中程度','名前の一致が必要','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(104,'snapshot~',0,'prepend',0,'オーディオ値からメッセージ作成',1,0,'中程度','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(105,'sfrecord~',0,'buffer~',0,'オーディオ録音',1,1,'高い','メモリ使用量に注意','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(106,'poly~',0,'poly~',0,'ネスト化されたポリフォニック構造（非推奨）',0,1,'非常に高い','深さに応じてCPU負荷が指数関数的に増加','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(107,'groove~',0,'groove~',0,'サンプル間の掛け合わせ（非推奨）',0,1,'高い','フィードバックリスクあり','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(108,'jit.catch~',0,'jit.matrix',0,'オーディオからJitterマトリックスへの変換',1,1,'高い','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(109,'mc.pack~',0,'mc.unpack~',0,'マルチチャンネル信号のパッキング/アンパッキング',1,1,'中程度','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(110,'gen~',0,'dac~',0,'高度なDSPからオーディオ出力へのルーティング',1,1,'処理内容に依存','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(111,'number',0,'gen~',0,'gen~パッチへのパラメータ入力',1,0,'最小限','パッチ内での処理方法に依存','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(112,'cycle~',0,'pfft~',0,'FFTベースの処理へのオーディオ入力',1,1,'高い','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(113,'selector~',0,'dac~',0,'複数入力から選択されたオーディオの出力',1,1,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(114,'number',0,'selector~',0,'オーディオ入力の選択制御',1,0,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(115,'live.dial',0,'sig~',0,'Liveダイアルからオーディオ信号変換',1,0,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(116,'live.slider',0,'line~',0,'Liveスライダーから滑らかなランプ生成',1,0,'中程度','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(117,'number~',0,'dac~',0,'数値付きシグナルメーターからオーディオ出力',1,1,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(118,'saw~',0,'biquad~',0,'ノコギリ波からバイクアッドフィルターへ',1,1,'中程度','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(119,'biquad~',0,'dac~',0,'バイクアッドフィルターからオーディオ出力',1,1,'中程度','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(120,'rect~',0,'lores~',0,'矩形波からローパスレゾナンスフィルターへ',1,1,'中程度','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(121,'lores~',0,'dac~',0,'ローパスレゾナンスフィルターからオーディオ出力',1,1,'中程度','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(122,'tri~',0,'reson~',0,'三角波からレゾナンスフィルターへ',1,1,'中程度','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(123,'reson~',0,'dac~',0,'レゾナンスフィルターからオーディオ出力',1,1,'中程度','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(124,'noise~',0,'cascade~',0,'ノイズからカスケードフィルターへ',1,1,'高い','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(125,'cascade~',0,'dac~',0,'カスケードフィルターからオーディオ出力',1,1,'中程度','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(126,'number',0,'cascade~',1,'カスケードフィルターパラメータ制御',1,0,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(127,'kslider',0,'pack',0,'キーボードスライダーからMIDIパック',1,0,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(128,'kslider',1,'pack',1,'キーボードスライダーベロシティからMIDIパック',1,0,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(129,'pack',0,'midiformat',0,'パックされたデータからMIDIフォーマット',1,0,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(130,'midiformat',0,'midiout',0,'MIDIフォーマットからMIDI出力',1,0,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(131,'midiin',0,'midiparse',0,'MIDI入力からMIDIパース',1,0,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(132,'midiparse',0,'unpack',0,'MIDIパースからアンパック',1,0,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(133,'unpack',0,'noteout',0,'アンパックからMIDIノート出力',1,0,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(134,'unpack',1,'noteout',1,'アンパックからMIDIベロシティ出力',1,0,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(135,'vst~',0,'dac~',0,'VSTプラグインからオーディオ出力',1,1,'高い','プラグインに依存','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(136,'adc~',0,'vst~',0,'オーディオ入力からVSTプラグイン',1,1,'高い','プラグインに依存','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(137,'pgmin',0,'pgmout',0,'MIDIプログラムチェンジの転送',1,0,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(138,'ctlin',0,'ctlout',0,'MIDIコントロールチェンジの転送',1,0,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(139,'bendin',0,'bendout',0,'MIDIピッチベンドの転送',1,0,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(140,'touchin',0,'touchout',0,'MIDIアフタータッチの転送',1,0,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(141,'polyin',0,'polyout',0,'MIDIポリフォニックアフタータッチの転送',1,0,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(142,'cycle~',0,'+~',0,'加算の第一入力',1,1,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(143,'cycle~',0,'+~',1,'加算の第二入力',1,1,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(144,'+~',0,'dac~',0,'加算結果の出力',1,1,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(145,'cycle~',0,'-~',0,'減算の第一入力',1,1,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(146,'cycle~',0,'-~',1,'減算の第二入力',1,1,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(147,'-~',0,'dac~',0,'減算結果の出力',1,1,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(148,'cycle~',0,'/~',0,'除算の第一入力',1,1,'最小限','ゼロ除算注意','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(149,'cycle~',0,'/~',1,'除算の第二入力',1,1,'最小限','ゼロ除算注意','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(150,'/~',0,'dac~',0,'除算結果の出力',1,1,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(151,'cycle~',0,'expr~',0,'式の第一入力',1,1,'高い','複雑な式は負荷大','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(152,'expr~',0,'dac~',0,'式の評価結果出力',1,1,'高い','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(153,'number',0,'expr~',1,'式のパラメータ制御',1,0,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(154,'cycle~',0,'avg~',0,'平均化処理への入力',1,1,'中程度','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(155,'avg~',0,'dac~',0,'平均化された信号の出力',1,1,'中程度','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(156,'cycle~',0,'clip~',0,'クリップ処理への入力',1,1,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(157,'clip~',0,'dac~',0,'クリップ処理された信号の出力',1,1,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(158,'number',0,'clip~',1,'クリップの下限値設定',1,0,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(159,'number',0,'clip~',2,'クリップの上限値設定',1,0,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(160,'cycle~',0,'sah~',0,'サンプル&ホールドへの入力信号',1,1,'中程度','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(161,'noise~',0,'sah~',1,'サンプル&ホールドのトリガー信号',1,1,'中程度','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(162,'sah~',0,'dac~',0,'サンプル&ホールド出力',1,1,'中程度','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(163,'adc~',0,'record~',0,'オーディオ入力から録音',1,1,'高い','メモリ使用量に注意','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(164,'number',0,'record~',1,'録音のスタート/ストップ制御',1,0,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(165,'record~',0,'buffer~',0,'録音データのバッファリング',1,1,'高い','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(166,'cycle~',0,'overdrive~',0,'オーバードライブエフェクトへの入力',1,1,'中程度','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(167,'overdrive~',0,'dac~',0,'オーバードライブ処理された信号の出力',1,1,'中程度','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(168,'number',0,'overdrive~',1,'オーバードライブのドライブ量設定',1,0,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(169,'cycle~',0,'tanh~',0,'双曲線正接ディストーションへの入力',1,1,'中程度','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(170,'tanh~',0,'dac~',0,'双曲線正接処理された信号の出力',1,1,'中程度','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(171,'groove~',0,'record~',0,'グルーブ再生から録音へのルーティング',1,1,'高い','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(172,'cycle~',0,'cycle~',2,'FMシンセシス（位相モジュレーション）',1,1,'中程度','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(173,'cycle~',0,'trapezoid~',0,'トラペゾイド波形生成の周波数入力',1,1,'中程度','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(174,'trapezoid~',0,'dac~',0,'トラペゾイド波形の出力',1,1,'中程度','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(175,'number',0,'trapezoid~',1,'トラペゾイド波形のシェイプ制御',1,0,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(176,'number',0,'trapezoid~',2,'トラペゾイド波形の幅制御',1,0,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(177,'noise~',0,'onepole~',0,'1極フィルターへの入力',1,1,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(178,'onepole~',0,'dac~',0,'1極フィルター出力',1,1,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(179,'number',0,'onepole~',1,'1極フィルターのカットオフ周波数設定',1,0,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(180,'cycle~',0,'teeth~',0,'テロイド波形生成の周波数入力',1,1,'中程度','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(181,'teeth~',0,'dac~',0,'テロイド波形の出力',1,1,'中程度','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(182,'number',0,'teeth~',1,'テロイド波形のシェイプ制御',1,0,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(183,'cycle~',0,'zerox~',0,'ゼロクロッシング検出への入力',1,1,'中程度','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(184,'zerox~',0,'snapshot~',0,'ゼロクロッシング検出結果',1,1,'中程度','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(185,'metro',0,'zerox~',1,'ゼロクロッシング検出のリセット',1,0,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(186,'cycle~',0,'degrade~',0,'ビットデグレーダーへの入力',1,1,'中程度','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(187,'degrade~',0,'dac~',0,'ビットデグレード処理された信号の出力',1,1,'中程度','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(188,'number',0,'degrade~',1,'ビットデプスの設定',1,0,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(189,'number',0,'degrade~',2,'サンプルレート低減の設定',1,0,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(190,'adc~',0,'mstosamps~',0,'ミリ秒からサンプル変換',1,1,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(191,'mstosamps~',0,'delay~',1,'サンプル単位の遅延時間指定',1,1,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(192,'sampstoms~',0,'number~',0,'サンプルからミリ秒への変換',1,1,'最小限','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(193,'pfft~',0,'pfft~',0,'スペクトル処理の連鎖（直列接続）',1,1,'非常に高い','FFTサイズが一致する必要あり','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(194,'buffer~',0,'groove~',0,'高度なサンプル再生のためのバッファ参照',1,0,'中程度','バッファサイズに依存','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(195,'mc.pack~',0,'pfft~',0,'マルチチャンネル信号のスペクトル処理',1,1,'非常に高い','チャンネル数の対応が必要','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(196,'adc~',0,'multiband_split~',0,'入力信号のマルチバンド分割',1,1,'高い','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(197,'multiband_split~',0,'poly~',0,'マルチバンド分割されたバンドごとの処理',1,1,'非常に高い','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(198,'poly~',0,'matrix~',0,'複数のポリフォニックボイスからマトリックスミキシング',1,1,'高い','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(199,'gizmo~',0,'poly~',0,'ピッチシフトからポリフォニック処理へ',1,1,'高い','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(200,'pfft~',0,'vectral~',0,'スペクトル処理からベクトル化処理へ',1,1,'非常に高い','なし','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO connection_patterns VALUES(201,'fft.frame~',0,'ml.svm',0,'スペクトル特徴量から機械学習分類へ',1,0,'非常に高い','データフォーマットの変換が必要','2025-04-06 16:16:39','2025-04-06 16:16:39');
CREATE TABLE validation_rules (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    rule_type TEXT NOT NULL,        -- ルールタイプ（例: syntax, performance, connection）
    pattern TEXT NOT NULL,          -- 正規表現パターン
    description TEXT,               -- ルールの説明
    severity TEXT,                  -- 重要度（例: warning, error, info）
    suggestion TEXT,                -- 改善提案
    example_fix TEXT,               -- 修正例
    context_requirements TEXT,      -- 適用コンテキスト（例: patcher, msp, jitter）
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
INSERT INTO validation_rules VALUES(1,'syntax','inlet_(\w+) without valid object','オブジェクト参照なしでのインレット作成。this ポインタが渡されていない','error','this->インスタンス変数を使用','inlet_new(this','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(2,'logic','outlet connection without creation','作成されていないアウトレットへの接続。未初期化アウトレットを使用','error','事前にoutlet_newを呼び出す','outlet_new(this','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(3,'performance','repeated jit.matrix creation in loop','ループ内でのjit.matrix再生成。毎フレームでメモリ再割り当て','warning','ループ外で一度だけ作成','jit.matrix生成をループ前に移動','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(4,'compatibility','Max8専用関数をMax7で使用','バージョン非互換の関数呼び出し。古いバージョンで未定義','error','互換性のある代替関数を使用','代替APIを使用するよう変更','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(5,'best_practice','direct buffer access without locking','バッファロックなしでの直接アクセス。データ競合の可能性','warning','適切なロック機構を使用する','buffer_locksamples()とbuffer_unlocksamples()を使用','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(6,'style','inconsistent method naming','一貫性のないメソッド命名。mixedCase と snake_case の混在','info','命名規則に従う','camelCaseまたはsnake_caseに統一','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(7,'thread_safety','UI操作をオーディオスレッドから行う','スレッド安全でないUI操作。スレッド間衝突の危険性','error','defer_low()でUIスレッドに処理を移譲','defer_low(uimethod','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(8,'memory','missing deallocation','メモリ解放忘れ。メモリリークを引き起こす','error','destructor内でメモリ解放','sysmem_freeptr(allocated_memory)','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(9,'exception','uncaught exception','例外ハンドリングがない。未処理例外でクラッシュする可能性','warning','try-catchブロックで囲む','try { ... } catch (std::exception& e) { error(e.what()); }','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(10,'resource','file not closed','ファイルクローズ忘れ。ファイルハンドルリークの可能性','warning','リソース使用後に適切に解放する','fclose(fp);','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(11,'security','user input without validation','ユーザー入力の検証が不十分。悪意ある入力で不正動作','error','値の範囲チェックを追加','if (value >= min_val && value <= max_val) { /*処理*/ }','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(12,'initialization','uninitialized variable use','未初期化変数の使用。不定値によるバグの可能性','error','変数を適切に初期化','float value = 0.0f;','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(13,'numeric','division by zero','ゼロによる除算。無限大や非数値結果の可能性','error','ゼロチェックを追加','if (denominator != 0) { result = numerator / denominator; }','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(14,'buffer','out of bounds access','バッファ境界外アクセス。無効なメモリ領域の読み書き','error','境界チェックを追加','if (index < buffer_size) { value = buffer[index]; }','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(15,'concurrency','shared resource without mutex','ミューテックスなしの共有リソースアクセス。データ競合の危険','error','クリティカルセクションを保護','critical_enter(x->mutex); /*処理*/ critical_exit(x->mutex);','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(16,'performance','inefficient memory copy','非効率なメモリコピー。大量データの不要なコピー','warning','参照または移動セマンティクスを使用','jit_object_method(dst_matrix','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(17,'audio','blocking operation in audio thread','オーディオスレッドでのブロッキング操作。音声途切れの原因','error','非ブロッキング設計に変更','処理を分割しスレッド間通信を使用','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(18,'signal_chain','missing perform method','シグナル処理メソッドが未定義。DSPチェーンに参加できない','error','DSPメソッドを定義','void myobj_perform(t_myobj* x','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(19,'lifecycle','missing free method','デストラクタメソッドの欠如。リソース解放されない','error','クラスにfreeメソッドを追加','void myobj_free(t_myobj* x) { /*解放処理*/ }','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(20,'documentation','missing inlet/outlet documentation','インレット/アウトレットの説明不足。使用方法が不明瞭','warning','説明コメントを追加','inlet<> input { this','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(21,'ui','hardcoded coordinates','ハードコードされた座標値。画面サイズ変更に対応できない','warning','相対座標または計算値を使用','float x_pos = box_rect.width * relative_x;','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(22,'type_safety','type conversion without check','型チェックなしの変換。不正なデータ型でクラッシュ','warning','型チェックを追加','if (atom_gettype(argv) == A_FLOAT) { value = atom_getfloat(argv); }','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(23,'efficiency','repeated symbol lookup','シンボル繰り返しルックアップ。gensym()の多用','warning','シンボルをキャッシュ','static t_symbol* ps_name = NULL; if (!ps_name) ps_name = gensym(""name"");','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(24,'min_api','non-type-safe message argument access','型安全でないメッセージ引数アクセス。誤った型変換の可能性','warning','型付きアクセサーを使用','float value = args[0];','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(25,'interoperability','incompatible data format','互換性のないデータ形式。他のオブジェクトと連携できない','error','標準形式に変換','jit_object_method(matrix','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(26,'scaling','fixed-size data structures','固定サイズのデータ構造。大量データ処理に制限','warning','動的割り当てに変更','data = (float*)sysmem_resizeptr(data','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(27,'threading','blocking UI thread','UIスレッドのブロッキング。インターフェース応答性低下','warning','バックグラウンドスレッドに処理を移動','worker_thread_execute(x->worker','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(28,'audio_quality','denormals not handled','非正規化数の未処理。CPU使用率急増の可能性','warning','非正規化数を適切に処理','if (fabs(value) < 1e-20) value = 0.0f;','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(29,'resource_management','excessive resource usage','過剰なリソース使用。メモリや処理能力の浪費','warning','リソース使用を最適化','matrix_size = MIN(desired_size','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(30,'algorithm','inefficient algorithm','非効率なアルゴリズム。O(n²)以上の計算量','warning','より効率的なアルゴリズムに変更','std::sort(data','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(31,'interface','inconsistent argument order','一貫性のない引数順序。APIの使いにくさの原因','warning','標準パターンに統一','function(target','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(32,'multi_channel','single channel assumption','単一チャンネル前提のコード。マルチチャンネル非対応','warning','チャンネル数を動的に処理','for (int ch = 0; ch < channels; ch++) { /*処理*/ }','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(33,'max_api','deprecated API usage','非推奨APIの使用。互換性問題やセキュリティリスク','error','最新APIに更新','jit_gl_texture_2dに変更 (jit_gl_textureの代わり)','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(34,'jitter','matrix dimension mismatch','マトリックス次元の不一致。処理エラーの原因','error','次元の一致を確認','if (dim[0] != expected_width || dim[1] != expected_height) { /*エラー処理*/ }','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(35,'jitter_gl','missing gl_context check','GLコンテキスト未確認。不正なGLコマンド呼び出し','error','コンテキスト存在確認を追加','if (jit_gl_get_context() == NULL) { object_error((t_object *)x','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(36,'audio_processing','signal rate mismatch','シグナルレート不一致。予期せぬ音声効果','warning','サンプルレート変換または確認','if (x->sr != sys_getsr()) { x->sr = sys_getsr(); recalculate_coefficients(x); }','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(37,'memory_alignment','unaligned memory access','アラインメント不正なメモリアクセス。パフォーマンス低下','warning','アラインメント適切なアクセスに変更','float *aligned_ptr = (float *)((((intptr_t)buffer + 15) >> 4) << 4);','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(38,'exception_handling','catch(...) without specific handler','汎用例外捕捉のみ。例外詳細情報の喪失','warning','具体的な例外型を捕捉','try { ... } catch (std::exception& e) { ... } catch (...) { ... }','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(39,'buffer_overflow','fixed size buffer with unchecked input','固定サイズバッファと未チェック入力。バッファオーバーフロー','error','サイズチェックまたは動的バッファ使用','if (input_size < sizeof(buffer)) { strcpy(buffer','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(40,'thread_synchronization','race condition in shared data','共有データの競合状態。タイミング依存のバグ','error','適切な同期プリミティブを使用','std::lock_guard<std::mutex> lock(mutex); // データアクセス前にロック','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(41,'dead_code','unreachable code','到達不能コード。無効な条件分岐','info','不要コードを削除または条件を修正','if (always_true) { // 処理 } /* 削除: else { 到達不能コード } */','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(42,'infinite_loop','potential infinite loop','無限ループの可能性。終了条件が不明確','error','明示的なループ終了条件を追加','while (condition) { /* 処理 */ if (++counter > max_iterations) break; }','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(43,'resource_leak','opened handle not released','オープンハンドルの未解放。リソースリーク','error','適切なクリーンアップコードを追加','HANDLE h = OpenXXX(); /* 処理 */ CloseXXX(h);','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(44,'error_handling','error code not checked','エラーコード未チェック。エラー状態の無視','warning','戻り値/エラーコードの確認を追加','if ((err = function()) != MAX_ERR_NONE) { object_error((t_object *)x','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(45,'localization','hardcoded strings','ハードコードされた文字列。国際化対応の欠如','info','リソース/定数を使用','object_error((t_object *)x','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(46,'ui_responsiveness','long operation in UI thread','UI スレッドでの長時間操作。UI応答性の低下','warning','バックグラウンド処理または進捗表示','defer_low(x','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(47,'audio_dropouts','heavy processing in audio thread','オーディオスレッドでの重い処理。音声途切れの原因','error','処理の最適化または分離','// DSP処理を最適化、または別スレッドに処理を移動','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(48,'floating_point','floating point comparison','浮動小数点の直接比較。丸め誤差による問題','warning','イプシロン値を用いた比較','if (fabs(a - b) < EPSILON) { /* 等価とみなす */ }','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(49,'buffer_management','buffer size not power of two','2の累乗でないバッファサイズ。FFT等での非効率','warning','2の累乗サイズに調整','size_t buffer_size = 1 << (int)ceil(log2(requested_size));','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(50,'memory_fragmentation','frequent small allocations','頻繁な小さなメモリ割り当て。メモリ断片化','warning','メモリプールまたはバッチ確保','x->memory_pool = sysmem_newptr(POOL_SIZE); // 一括確保','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(51,'denormal','denormal values in audio path','オーディオパスでの非正規化数。CPU使用率上昇','warning','非正規化数を検出して処理','if (fabs(sample) < 1.0e-20) sample = 0.0f;','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(52,'initialization_order','object used before initialization','初期化前のオブジェクト使用。未定義動作','error','初期化後の使用を保証','if (initialized) { /* 処理 */ } else { /* 初期化またはエラー */ }','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(53,'thread_affinity','DSP performed outside audio thread','オーディオスレッド外でのDSP処理。同期問題の可能性','warning','適切なスレッドで処理','// オーディオ処理はperformメソッド内に限定','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(54,'parameter_validation','missing parameter validation','パラメータ検証の欠如。無効値によるバグ','warning','引数の検証コードを追加','if (param < 0 || param > 1.0) { object_error((t_object *)x','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(55,'null_pointer','potential null pointer dereference','NULL参照の可能性。クラッシュの原因','error','NULL チェックを追加','if (ptr != NULL) { /* ポインタ使用 */ } else { /* エラー処理 */ }','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(56,'file_io','unbuffered file I/O in audio thread','オーディオスレッドで非バッファリングI/O。音声途切れ','error','バッファリングI/Oまたは別スレッド処理','// ファイルI/Oをバックグラウンドスレッドに移動','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(57,'signal_vector_size','fixed vector size assumption','固定ベクトルサイズ前提。可変サイズ非対応','warning','動的サイズ対応コードに変更','// sys_getblksize()の値に基づいて処理','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(58,'memory_ordering','memory ordering issue','メモリ順序問題。並列処理での不整合','error','適切な同期プリミティブを使用','std::atomic<int> counter; // 単純な変数の代わりに','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(59,'attribute_modification','attribute modified during perform','演奏中の属性変更。予期せぬ音声効果','warning','パラメータ平滑化を使用','// 急激な変化を避けるためのパラメータスムージング','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(60,'gl_resource_management','GL resource not properly released','GL リソースの不適切な解放。リソースリーク','error','適切なGL解放コードを追加','if (texture) glDeleteTextures(1','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(61,'jitter_performance','inefficient matrix operation','非効率なマトリックス操作。パフォーマンス低下','warning','最適化されたJitterメソッドを使用','// jit.opなどの最適化されたオブジェクトを使用','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(62,'max_path','hardcoded file paths','ハードコードされたファイルパス。OS間の互換性問題','warning','パスオブジェクトまたは相対パスを使用','path_toabsolutesystempath(path','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(63,'attribute_thread_safety','thread unsafe attribute access','スレッド安全でない属性アクセス。データ競合','error','スレッドセーフな属性アクセスに変更','attribute<float','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(64,'message_thread_safety','thread unsafe message handling','スレッド安全でないメッセージ処理。データ競合','error','スレッドセーフな設計に変更','defer_low(x','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(65,'buffer_consistency','buffer modification during playback','再生中のバッファ変更。音声アーティファクト','warning','二重バッファリングを使用','// 変更用と再生用の別バッファを使いスワップ','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(66,'signal_connection','audio connection to non-audio object','非オーディオオブジェクトへの信号接続。無効な接続','error','適切なオーディオパスに修正','// シグナルは~付きオブジェクトにのみ接続','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(67,'timing','high-precision timing in non-RT thread','非RTスレッドでの高精度タイミング要求。不安定な動作','warning','適切なタイミングメカニズムを使用','clock_delay(x->clock','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(68,'concurrency_model','mixing concurrency models','複数の並行性モデルの混在。同期問題のリスク','warning','一貫した並行性モデルを使用','// スレッド、非同期コールバック、イベントループの一貫した使用','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(69,'min_dsp','inefficient MIN_FUNCTION for DSP','DSP用のMIN_FUNCTION非効率。オーバーヘッド増加','warning','operator() メソッドを使用','sample operator()(sample x) { return x * gain; }','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(70,'error_propagation','swallowed errors','エラーの抑制。問題の発見と診断の困難化','warning','エラー状態を適切に伝播','if (err != MAX_ERR_NONE) return err; // エラーを上位に伝える','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(71,'audio_feedback','potential audio feedback loop','オーディオフィードバックループの可能性。発振リスク','warning','フィードバックパスに制限を追加','if (feedback > 0.99f) feedback = 0.99f; // 上限設定','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(72,'dsp_load','excessive DSP load','過剰なDSP負荷。システムパフォーマンス低下','warning','処理を最適化または間引き','if (!(tick_count % decimation_factor)) { /* 処理 */ }','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(73,'ui_event_handling','ui event handler doesn''t return value','戻り値なしのUIイベントハンドラ。イベント伝播制御不能','warning','適切な戻り値を返す','return 1; // イベント処理完了を示す','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(74,'buffer_alignment','buffer not aligned for SIMD','SIMDに適さないバッファアラインメント。最適化の妨げ','info','アラインメントを調整','float *aligned_ptr = (float *)(((uintptr_t)ptr + 15) & ~15);','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(75,'audio_glitch','potential audio glitch','音声グリッチの可能性。音質低下','warning','信号の連続性を確保','// 急激な値変化を避けるスムージングを実装','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(76,'multithreading','potential deadlock','デッドロックの可能性。システム停止のリスク','error','リソースの取得順序を一貫させる','// 常に同じ順序でロックを取得する設計に変更','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(77,'signal_discontinuity','signal discontinuity','信号の不連続性。クリックノイズの原因','warning','値変化を滑らかにする','output = prev_output + (target - prev_output) * smooth_factor;','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(78,'real_time_constraint','real-time constraint violation','リアルタイム制約違反。処理遅延問題','error','処理時間を短縮','// 処理を最適化または複数フレームに分割','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(79,'performance_critical','inefficient operation in hot path','高頻度パスでの非効率な操作。パフォーマンスボトルネック','warning','ホットパスを最適化','// ループ内計算を外部に移動、キャッシュ活用','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(80,'min_attribute','missing default for min attribute','Min属性のデフォルト値なし。初期状態が不明確','warning','明示的なデフォルト値を設定','attribute<float> gain { this','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(81,'signal_rate','sample rate dependent constants','サンプルレート依存の定数。レート変更時に問題','warning','実行時計算または再計算に変更','// サンプルレート変更時に係数を再計算','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(82,'numerical_stability','numerical instability risk','数値的不安定性のリスク。計算精度の問題','warning','数値的に安定なアルゴリズムを使用','// 桁落ちを避ける計算順序に変更','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(83,'thread_priority','inappropriate thread priority','不適切なスレッド優先度。システム応答性への影響','warning','適切な優先度を設定','systhread_setpriority(x->thread','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(84,'error_reporting','silent failure','エラーの無言の失敗。問題の発見困難','warning','エラーを明示的に報告','object_error((t_object *)x','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(85,'jitter_gl_state','GL state not restored','GLステートの未復元。予期せぬ描画結果','warning','GL状態の保存と復元','glPushAttrib(GL_ALL_ATTRIB_BITS); /* 処理 */ glPopAttrib();','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(86,'recursion','excessive recursion depth','過度の再帰深度。スタックオーバーフローのリスク','error','反復的アプローチまたは深度制限を使用','if (depth > MAX_RECURSION_DEPTH) return; // 深度制限','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(87,'synchronization','missing synchronization','同期化の欠如。競合状態の可能性','error','適切な同期プリミティブを使用','critical_enter(x->lock); /* 処理 */ critical_exit(x->lock);','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(88,'min_message','inefficient message processing','非効率なメッセージ処理。パフォーマンス低下','warning','メッセージ処理を最適化','message<> bang { this','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(89,'value_clipping','missing value clipping','値のクリッピングがない。有効範囲外の値','warning','適切な範囲クリッピングを追加','value = CLAMP(value','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(90,'system_call','blocking system call','ブロッキングシステムコール。処理の中断','warning','非ブロッキング代替手段を使用','// 非ブロッキングI/O、非同期呼び出しに変更','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(91,'exception_in_destructor','exception thrown in destructor','デストラクタ内での例外発生。未定義動作','error','デストラクタでのエラー処理を修正','try { /* 処理 */ } catch (...) { /* ログ記録のみ */ }','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(92,'performance_regression','performance regression','パフォーマンス退行。以前より処理効率低下','warning','パフォーマンス低下原因を解消','// 新たに導入された非効率な処理を最適化','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(93,'object_creation','object created in audio thread','オーディオスレッドでのオブジェクト生成。メモリ確保遅延','error','事前にオブジェクトを作成','// 初期化時にオブジェクトを作成しておく','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(94,'audio_buffer_size','fixed audio buffer size assumption','固定オーディオバッファサイズ前提。可変サイズ非対応','warning','動的バッファサイズに対応','x->buffer_size = sys_getblksize();','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(95,'min_initialization','object used before min initialization','初期化前のMinオブジェクト使用。未定義動作','error','適切な初期化順序を確保','// constructorでの初期化完了を確認','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(96,'attribute_update','missing attribute update notification','属性更新通知の欠如。UI更新されない','warning','属性変更後の通知を追加','object_notify(x','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(97,'ui_refresh','missing UI refresh','UI更新の欠如。表示が古い状態のまま','warning','適切なUIリフレッシュ呼び出しを追加','jbox_redraw((t_jbox *)x);','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(98,'error_handling_locality','distant error handling','エラー処理が発生場所から離れている。追跡困難','info','エラー発生場所の近くでハンドリング','if (error) { /* すぐにエラー処理 */ }','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(99,'max_min_consistency','mixing Max C and Min APIs','MaxのCスタイルとMinのC++スタイルの混在。一貫性欠如','warning','一貫したAPI使用に統一','// 同じ機能には同じAPIスタイルを使用','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(100,'reentrancy','non-reentrant code','リエントラント性のないコード。再入による問題','warning','リエントラントな設計に変更','// 状態を引数として渡す設計に変更','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(101,'code_complexity','excessive cyclomatic complexity','過度の循環的複雑度。理解・保守の困難','info','コードを小さな関数に分割','// 長い関数を意味のある小さな関数に分割','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(102,'buffer_edge_cases','missing buffer edge case handling','バッファエッジケース処理の欠如。境界値問題','warning','エッジケース処理を追加','if (buffer_size == 0) return 0; // 空バッファの処理','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(103,'plugin_memory_isolation','shared memory across plugin instances','プラグインインスタンス間の共有メモリ。予期せぬ干渉','error','インスタンス固有のメモリを使用','// static変数の代わりにインスタンス変数を使用','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(104,'min_exception_safety','exception unsafe Min code','例外安全でないMinコード。リソースリークの可能性','warning','例外安全な設計に変更','// RAII、スマートポインタ、try-catchブロックを使用','','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO validation_rules VALUES(105,'resource_cleanup','resource cleanup in wrong thread','誤ったスレッドでのリソース解放。解放失敗の可能性','warning','適切なスレッドでクリーンアップ','// リソースを確保したのと同じスレッドで解放','','2025-04-06 16:16:39','2025-04-06 16:16:39');
CREATE TABLE api_mapping (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    natural_language_intent TEXT NOT NULL, -- 自然言語による意図（例: "メトロノームを作成する"）
    min_devkit_function_id INTEGER,        -- 対応するMin-DevKit API関数ID
    transformation_template TEXT,          -- 変換テンプレート
    context_requirements TEXT,             -- コンテキスト要件
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (min_devkit_function_id) REFERENCES min_devkit_api(id)
);
INSERT INTO api_mapping VALUES(1,'オーディオ入力を作成',1,'inlet_in = add_signal_inlet();','オーディオオブジェクト','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(2,'バングを出力する',2,'outlet_bang(m_outlet);','コントロールフロー','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(3,'数値パラメータを設定',3,'param.set(name',' value','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(4,'オーディオ処理でサンプル値を取得',4,'sample_value = in1[i];','MSPオブジェクト','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(5,'新しいMaxオブジェクトを定義する',5,'class_new(name',' constructor','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(6,'属性値を変更する',6,'attribute = new_value;','Minオブジェクト','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(7,'インレットからメッセージを受け取る',7,'message<> msg { this',' ""message_name""','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(8,'バッファ参照を作成する',8,'buffer_reference buffer { this };','バッファ処理','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(9,'ディクショナリを操作する',9,'auto dict = dict::make();','辞書操作','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(10,'プリファレンス値を保存する',10,'preferences::set(path',' key','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(11,'オーディオシグナルを生成する',11,'perform_method(data',' channels','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(12,'ユーザーインターフェースを描画する',12,'jgraphics_rectangle_fill(g',' x','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(13,'マルチチャンネルオーディオを処理する',13,'mc_perform_method(data',' channels','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(14,'バッファサンプルにアクセスする',14,'float* samples = buffer_locksamples(buffer_obj); /* 処理 */ buffer_unlocksamples(buffer_obj);','バッファ操作','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(15,'Jitterマトリックスを作成する',15,'jit_matrix_info_default(&info); jit_object_method(matrix',' _jit_sym_dim','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(16,'オブジェクトの説明を設定する',16,'MIN_DESCRIPTION {""Object description""};','Minオブジェクト','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(17,'メッセージハンドラーを追加する',17,'class_addmethod(c',' (method)myobj_bang','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(18,'エラーメッセージを表示する',18,'object_error((t_object*)x',' ""Error message: %s""','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(19,'デバッグ情報を出力する',19,'object_post((t_object*)x',' ""Debug info: %s""','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(20,'セーブ・リストア関数を設定する',20,'class_addmethod(c',' (method)myobj_save','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(21,'スレッドセーフな処理を実行する',21,'defer_low(x',' (method)deferred_function','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(22,'特定時間後に処理を実行する',22,'clock_delay(x->clock',' milliseconds);','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(23,'パッチャーオブジェクトを取得する',23,'object_attr_getobj(x',' _sym_parentpatcher','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(24,'オブジェクト引数を解析する',24,'if (argc > 0 && argv[0].a_type == A_FLOAT) { value = atom_getfloat(&argv[0]); }','引数処理','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(25,'シンボルをルックアップする',25,'t_symbol* s = gensym(""symbol_name"");','シンボル管理','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(26,'メモリを確保する',26,'void* memory = sysmem_newptr(size);','メモリ管理','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(27,'メモリを解放する',27,'sysmem_freeptr(memory);','メモリ管理','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(28,'オブジェクトボックスにテキスト表示する',28,'object_method(box',' _sym_varname','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(29,'サブパッチャーを作成する',29,'subpatcher = newobject_sprintf(patcher',' ""jpatcher @name %s""','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(30,'リスト要素にアクセスする',30,'for (int i=0; i<ac; i++) { value = atom_getfloat(&av[i]); }','リスト処理','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(31,'ディクショナリにエントリを追加する',31,'dictionary_appendfloat(dict',' key','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(32,'FFT処理を行う',32,'fft_perform(x->fft',' in_vector','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(33,'MIDI情報を処理する',33,'midiin_doread(x',' &m);','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(34,'マトリックスセルを更新する',34,'jit_matrix_set_value(matrix',' vector','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(35,'オブジェクトの属性を取得する',35,'object_attr_getfloat(x',' gensym(""attribute_name"")','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(36,'パッチャー内のオブジェクトを検索する',36,'object = (t_object*)object_method(patcher',' _sym_getnamedbox','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(37,'UIオブジェクトの外観を設定する',37,'attr_args_process(x',' argc','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(38,'Min-APIスタイルのインレットを宣言する',38,'inlet<> input { this',' ""(signal) Input signal"" };','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(39,'Min-APIスタイルのアウトレットを宣言する',39,'outlet<> output { this',' ""(signal) Output signal"" };','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(40,'Min-APIスタイルの属性を宣言する',40,'attribute<number> gain { this',' ""gain""','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(41,'Min-APIスタイルのメッセージハンドラーを宣言する',41,'message<> bang { this',' ""bang""','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(42,'Min-APIスタイルの引数を宣言する',42,'argument<symbol> name_arg { this',' ""name""','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(43,'マルチチャンネルシグナル処理を行う',43,'auto audio_bundle = mc_operator_inputs_and_outputs(ENABLE_IN_AND_OUT);','MC操作','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(44,'バッファからサンプルを読み込む',44,'float sample = samples[index];','バッファアクセス','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(45,'バッファにサンプルを書き込む',45,'samples[index] = value;','バッファ書き込み','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(46,'パフォーマンスカウンターを使用する',46,'x->counter = plus_perform(x->counter);','パフォーマンス最適化','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(47,'オブジェクトのヘルプファイルを設定する',47,'class_setname(c',' s','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(48,'オブジェクトアイコンを設定する',48,'class_attr_format(c',' ""color""','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(49,'特定のオブジェクトからインスピレーションを得る',49,'MIN_RELATED {""object1',' object2','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(50,'パッチャーのコンテキストを取得する',50,'atoms info = { patcher.name()',' patcher.path() };','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(51,'オーディオレートでループ処理を行う',51,'for (auto i=0; i<n; ++i) { out1[i] = process(in1[i]); }','MSP演算','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(52,'サンプルバッファの長さを取得する',52,'long length = buffer_getframecount(buffer_obj);','バッファ情報','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(53,'バッファのチャンネル数を取得する',53,'long channels = buffer_getchannelcount(buffer_obj);','バッファ情報','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(54,'サンプルレートを取得する',54,'double sr = sys_getsr();','システム情報','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(55,'ブロックサイズを取得する',55,'long vs = sys_getblksize();','システム情報','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(56,'インレット番号を識別する',56,'long inlet_number = proxy_getinlet((t_object *)x);','インレット管理','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(57,'プロキシインレットを作成する',57,'x->proxy = proxy_new((t_object *)x',' inlet_number','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(58,'内部クロックを作成する',58,'x->clock = clock_new(x',' (method)myclock_callback);','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(59,'クロックコールバックを実装する',59,'void myclock_callback(t_myobj *x) { /* 処理 */ }','タイミングコントロール','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(60,'t_atomを初期化する',60,'t_atom a; atom_setlong(&a',' value);','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(61,'アトムリストを作成する',61,'t_atom argv[4]; atom_setfloat(&argv[0]',' 1.0); atom_setsym(&argv[1]','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(62,'メッセージを送信する',62,'outlet_list(x->outlet',' NULL','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(63,'テキストマッピングを設定する',63,'class_register_map_name(c',' ps_myclass);','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(64,'属性を登録する',64,'class_addattr(c',' attr_offset_new("myattr"','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(65,'インレット説明テキストを設定する',65,'class_addmethod(c',' (method)stdinletinfo','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(66,'標準インレット情報を提供する',66,'void stdinletinfo(t_myobj *x',' void *b','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(67,'初期化時にバンドルを構築する',67,'for (auto i=0; i < channels; ++i) { add_output("output"',' "Output channel " + std::to_string(i+1)); }','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(68,'パラメータ値を遠隔制御する',68,'send("mixer/track/1/gain"',' 0.5);','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(69,'メッセージをパース/解析する',69,'const char* text = atom_getsym(argv)->s_name; int param_id = atoi(text);','メッセージ解析','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(70,'関数ポインタを定義する',70,'typedef void (*t_mymethod)(t_myobj *x',' t_floatarg f);','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(71,'デフォルト引数を設定する',71,'CLASS_ATTR_DEFAULT(c',' "limit"','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(72,'UI属性を隠す',72,'CLASS_ATTR_INVISIBLE(c',' "hidden"','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(73,'属性フラグを設定する',73,'CLASS_ATTR_SAVE(c',' "gain"','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(74,'属性スタイルを設定する',74,'CLASS_ATTR_STYLE_LABEL(c',' "cutoff"','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(75,'属性フィルタを設定する',75,'CLASS_ATTR_FILTER_CLIP(c',' "gain"','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(76,'属性順序を設定する',76,'CLASS_ATTR_ORDER(c',' "gain"','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(77,'クラスの基本カテゴリを設定する',77,'CLASS_ATTR_CATEGORY(c',' "Basic");','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(78,'テキスト描画にフォントを指定する',78,'jfont *font = jfont_create("Arial"',' JGRAPHICS_FONT_SLANT_NORMAL','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(79,'テキストを描画する',79,'jgraphics_select_font_face(g',' "Arial"','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(80,'線を描画する',80,'jgraphics_move_to(g',' x1','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(81,'塗りつぶしの色を設定する',81,'jgraphics_set_source_rgba(g',' red','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(82,'矩形を描画する',82,'jgraphics_rectangle(g',' x','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(83,'曲線を描画する',83,'jgraphics_curve_to(g',' cp1x','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(84,'円を描画する',84,'jgraphics_arc(g',' x','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(85,'描画パスを塗りつぶす',85,'jgraphics_fill(g);','グラフィックス','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(86,'パスの輪郭を描画する',86,'jgraphics_stroke(g);','グラフィックス','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(87,'マウスドラッグイベントを処理する',87,'void myobj_mousedrag(t_myobj *x',' t_object *patcherview','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(88,'マウスダウンイベントを処理する',88,'void myobj_mousedown(t_myobj *x',' t_object *patcherview','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(89,'マウスアップイベントを処理する',89,'void myobj_mouseup(t_myobj *x',' t_object *patcherview','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(90,'マウスエンターイベントを処理する',90,'void myobj_mouseenter(t_myobj *x',' t_object *patcherview','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(91,'マウスリーブイベントを処理する',91,'void myobj_mouseleave(t_myobj *x',' t_object *patcherview','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(92,'マウスムーブイベントを処理する',92,'void myobj_mousemove(t_myobj *x',' t_object *patcherview','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(93,'キーボード入力を処理する',93,'void myobj_key(t_myobj *x',' t_object *patcherview','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(94,'オブジェクトの外観を描画する',94,'void myobj_paint(t_myobj *x',' t_object *view) { t_rect rect; jgraphics *g = (jgraphics*) patcherview_get_jgraphics(view); /* 描画処理 */ }','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(95,'オブジェクトのマウスカーソルを設定する',95,'object_method(patcherview',' gensym("setcursor")','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(96,'オブジェクトのサイズを取得する',96,'jbox_get_rect_for_view((t_object *)x',' patcherview','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(97,'オブジェクトのサイズを設定する',97,'jbox_set_rect_for_view((t_object *)x',' patcherview','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(98,'オブジェクトを再描画させる',98,'jbox_redraw((t_jbox *)x);','UI更新','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(99,'オブジェクトのバックグランド色を設定する',99,'jrgba color = { red',' green','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(100,'Minオブジェクトの単位を設定する',100,'MIN_UNITS {"Hz"',' "ms"','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(101,'Minオブジェクトのスネークケース名を設定する',101,'MIN_TAGS {"fx"',' "convolution"','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(102,'Minオブジェクトのプロセス関数を実装する',102,'sample operator()(sample x) { return x * m_gain; }','Min-DSP','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(103,'Minオブジェクトのセットアップを行う',103,'message<> maxclass_setup { this',' "maxclass_setup"','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(104,'オブジェクトのクレジットを設定する',104,'MIN_AUTHOR {""Cycling ''74""};','Min-ドキュメント','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(105,'信号対信号演算を実装する',105,'template <typename T> sample operator()(sample x',' T y) { return x * y; }','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(106,'バッファデータの読み込みを実装する',106,'dictobj::for_each(my_dict',' [&](const symbol& key','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(107,'Min-APIスタイルのバッファ参照を作成する',107,'buffer_reference my_buffer { this };','Min-バッファ','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(108,'Min-APIスタイルのバッファビュー取得',108,'auto buf = buffer.get();','Min-バッファ','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(109,'Min-APIスタイルのバッファをロック',109,'auto b = buffer.lock();','Min-バッファ','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(110,'Minオブジェクトの範囲パラメータを設定',110,'range {0.0',' 100.0}','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(111,'Minオブジェクトのユニット表示を設定',111,'title {"Frequency"}',' description {"Cutoff frequency"}','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(112,'Minオブジェクトのラベル表示を設定',112,'title {"Amount"}',' range {0.0','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(113,'Min-APIスタイルの限定範囲属性',113,'attribute<number',' threadsafe::no','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(114,'Min-APIスタイルのクリップなし属性',114,'attribute<number',' threadsafe::no','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(115,'Min-APIスタイルのスレッドセーフ属性',115,'attribute<number',' threadsafe::yes> feedback { this','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(116,'Min-APIスタイルのシンボル属性',116,'attribute<symbol> mode { this',' "mode"','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(117,'Min-APIスタイルのブール属性',117,'attribute<bool> bypass { this',' "bypass"','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(118,'ディクショナリをパースする',118,'dict d = dict(args); auto value = d["key"];','Min-辞書','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(119,'Minオブジェクトからシンボルを出力',119,'output[0].send(symbol(text));','Min-出力','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(120,'Minオブジェクトからリストを出力',120,'output[0].send({1.0',' 2.0','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(121,'Minオブジェクトからバングを出力',121,'output[0].send(k_sym_bang);','Min-出力','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(122,'自己送信メッセージを処理',122,'message<> trigger { this',' "trigger"','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(123,'引数に基づいてパラメータを初期化',123,'MIN_ARGUMENT_FUNCTION { gain = arg; }','Min-引数','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(124,'ビューを実装する',124,'ui<> ui_handler { this',' MIN_FUNCTION { /* UI処理 */ return true; }};','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(125,'座標マッピングを実装する',125,'double map_value(double value',' double in_low','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(126,'バッファデータを正規化する',126,'for (auto i=0; i<length; ++i) { samples[i] /= max_value; }','バッファ処理','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(127,'ピーク値を検出する',127,'float peak = 0.0f; for (auto i=0; i<length; ++i) { peak = std::max(peak',' std::abs(samples[i])); }','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(128,'RMS値を計算する',128,'float sum = 0.0f; for (auto i=0; i<length; ++i) { sum += samples[i] * samples[i]; } float rms = sqrt(sum / length);','シグナル分析','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(129,'周波数から角速度に変換する',129,'double omega = 2.0 * M_PI * frequency / sampling_rate;','DSP変換','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(130,'バイリニア変換を適用する',130,'double c = 1.0 / tan(omega / 2.0);','フィルター設計','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(131,'ディレイラインを更新する',131,'delay_line[write_index] = input; write_index = (write_index + 1) % delay_length;','オーディオ遅延','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(132,'ディレイラインから読み込む',132,'float delayed_sample = delay_line[(write_index - delay_samples + delay_length) % delay_length];','オーディオ遅延','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(133,'パッチャー内のオブジェクトにメッセージを送信する',133,'object_method_typed(target_object',' message_name','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(134,'有効な値かどうか確認する',134,'if (!std::isnan(value) && !std::isinf(value)) { /* 処理 */ }','値検証','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(135,'マトリックスの次元情報を設定する',135,'jit_matrix_info_set_dim(&info',' 2','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(136,'マトリックスの型情報を設定する',136,'info.type = _jit_sym_char;','Jitter設定','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(137,'Jitterマトリックスのメモリをロックする',137,'jit_object_method(matrix',' _jit_sym_getdata','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(138,'Jitterマトリックスのメモリロックを解除する',138,'jit_object_method(matrix',' _jit_sym_lock','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(139,'OpenGLリソースを初期化する',139,'jit_gl_context ctx = jit_gl_get_context();','Jitter-GL','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(140,'シェーダーをロードする',140,'jit_object_method(shader',' _jit_sym_load','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(141,'テクスチャを生成する',141,'texture = (t_jit_object *)jit_object_new(_jit_sym_jit_gl_texture',' context);','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(142,'OpenGLシェーダーを適用する',142,'jit_object_method(shader',' _jit_sym_begin);','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(143,'3Dオブジェクトを描画する',143,'draw_box(1.0',' 1.0','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(144,'カメラ位置を設定する',144,'jit_object_method(camera',' _jit_sym_position','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(145,'オブジェクトの回転を設定する',145,'jit_object_method(object',' _jit_sym_rotatexyz','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(146,'オブジェクトの位置を設定する',146,'jit_object_method(object',' _jit_sym_position','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(147,'オブジェクトのスケールを設定する',147,'jit_object_method(object',' _jit_sym_scale','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(148,'OpenGLコンテキストをバインドする',148,'jit_object_method(draw_context',' _jit_sym_bind);','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(149,'マトリックスフィールドアクセスを取得する',149,'auto field = jit_object_method(matrix',' _jit_sym_getfieldbyname','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(150,'パーティクルシステムを更新する',150,'jit_object_method(system',' _jit_sym_update);','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(151,'物理世界をシミュレーションする',151,'jit_object_method(world',' _jit_sym_simulate','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(152,'メッシュデータを生成する',152,'jit_object_method(mesh',' _jit_sym_rebuild);','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(153,'画像をファイルに保存する',153,'jit_object_method(matrix',' _jit_sym_write','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(154,'画像をファイルから読み込む',154,'jit_object_method(matrix',' _jit_sym_read','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(155,'バイナリデータを読み込む',155,'sysfile_readtextfile(filename',' &txthandle','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(156,'バイナリデータを書き込む',156,'sysfile_writetextfile(filename',' txthandle','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(157,'ファイルダイアログを表示する',157,'open_dialog(x',' filename','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(158,'オブジェクトのコンテンツを永続化する',158,'binbuf_write(x->binbuf',' filename','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(159,'バイナリバッファにメッセージを追加する',159,'binbuf_append(x->binbuf',' a_binbuf);','2025-04-06 16:16:39','2025-04-06 16:16:39');
INSERT INTO api_mapping VALUES(160,'バイナリバッファからメッセージを取得する',160,'binbuf_getnatom(x->binbuf);','バイナリデータ','2025-04-06 16:16:39','2025-04-06 16:16:39');
DELETE FROM sqlite_sequence;
INSERT INTO sqlite_sequence VALUES('max_objects',204);
INSERT INTO sqlite_sequence VALUES('min_devkit_api',169);
INSERT INTO sqlite_sequence VALUES('connection_patterns',201);
INSERT INTO sqlite_sequence VALUES('validation_rules',105);
INSERT INTO sqlite_sequence VALUES('api_mapping',160);
CREATE INDEX idx_max_objects_name ON max_objects(name);
CREATE INDEX idx_max_objects_category ON max_objects(category);
CREATE INDEX idx_min_devkit_api_function_name ON min_devkit_api(function_name);
CREATE INDEX idx_connection_patterns_source ON connection_patterns(source_object);
CREATE INDEX idx_connection_patterns_destination ON connection_patterns(destination_object);
CREATE INDEX idx_validation_rules_rule_type ON validation_rules(rule_type);
CREATE INDEX idx_api_mapping_intent ON api_mapping(natural_language_intent);
COMMIT;
